###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           24/Apr/2020  14:22:13
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\platy\Desktop\ECE-306_Code\Project_07b\display.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EWDF86.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Project_07b\display.c -lC
#        C:\Users\platy\Desktop\ECE-306_Code\Project_07b\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Project_07b\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_07b\Debug\List\display.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_07b\Debug\Obj\display.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Project_07b\display.c
      1          //==============================================================================
      2          // Filename : display.c
      3          // Description: This file contains the functions display proccesses
      4          // 
      5          // Author: Marcus Kok
      6          // Date: March 2020
      7          // Compiler: Made with IAR Embedded Workbench for MSP430 7.12.4
      8          //==============================================================================
      9          
     10          #include  "functions.h"
     11          #include  "msp430.h"
     12          #include "macros.h"
     13          #include <string.h>
     14          
     15          // globals

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     16          char time_display_buffer[] = "s    ";
   \                     time_display_buffer:
   \   000000                DS8 6
   \   000006                REQUIRE `?<Initializer for time_display_buffer>`
     17          extern unsigned int buttonState;
     18          extern char display_line[numLines][strSize];
     19          extern unsigned int num_presses;
     20          extern volatile unsigned char display_changed;
     21          extern char display_line[numLines][strSize];
     22          extern volatile unsigned char update_display;
     23          extern unsigned int emitter_flag;
     24          extern int display_state;
     25          extern volatile char process_buf[LARGE_RING_SIZE];
     26          extern char receive_char[MAX_STR_SIZE];
     27          extern char test_command[NCSU_SIZE];
     28          extern char transmit_char[LARGE_RING_SIZE];
     29          extern int serial_display;
     30            extern unsigned int circle_clock;
     31            extern char circle_timer[TIMER_DIGITS];

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     32            unsigned int BL_one_time = TRUE;
   \                     BL_one_time:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for BL_one_time>`
     33            extern unsigned int white_threshold;
     34            extern unsigned int black_threshold;
     35            extern unsigned int calibrated;
     36          //------------------------------------------------------------------------------
     37          

   \                                 In  segment CODE, align 2
     38          void Init_Chars(void){
   \                     Init_Chars:
     39            strcpy(display_line[line1], "          ");
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   3C40....     MOV.W   #display_line, R12
   \   000008   ........     CALLA   #strcpy
     40            update_string(display_line[line1], line1);
   \   00000C   0D43         MOV.W   #0x0, R13
   \   00000E   ........     CALLA   #update_string
     41            strcpy(display_line[line2], "          ");
   \   000012   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000016   3C40....     MOV.W   #display_line + 11, R12
   \   00001A   ........     CALLA   #strcpy
     42            update_string(display_line[line2], line2);
   \   00001E   1D43         MOV.W   #0x1, R13
   \   000020   3C40....     MOV.W   #display_line + 11, R12
   \   000024   ........     CALLA   #update_string
     43            strcpy(display_line[line3], "          ");
   \   000028   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00002C   3C40....     MOV.W   #display_line + 22, R12
   \   000030   ........     CALLA   #strcpy
     44            update_string(display_line[line3], line3);
   \   000034   2D43         MOV.W   #0x2, R13
   \   000036   3C40....     MOV.W   #display_line + 22, R12
   \   00003A   ........     CALLA   #update_string
     45            strcpy(display_line[line4], "          ");
   \   00003E   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000042   3C40....     MOV.W   #display_line + 33, R12
   \   000046   ........     CALLA   #strcpy
     46            update_string(display_line[line4], line4);
   \   00004A   3D400300     MOV.W   #0x3, R13
   \   00004E   3C40....     MOV.W   #display_line + 33, R12
   \   000052   ........     CALLA   #update_string
     47            enable_display_update();
   \   000056   ........     CALLA   #enable_display_update
     48            display_changed = TRUE;
   \   00005A   D243....     MOV.B   #0x1, &display_changed
     49          }
   \   00005E   1001         RETA
     50            

   \                                 In  segment CODE, align 2
     51          void Serial_Display_Process(void){
   \                     Serial_Display_Process:
     52            
     53            switch(serial_display){
   \   000000   1F42....     MOV.W   &serial_display, R15
   \   000004   0F83         SUB.W   #0x0, R15
   \   000006   4C24         JEQ     ??Serial_Display_Process_0
   \   000008   1F83         SUB.W   #0x1, R15
   \   00000A   4A24         JEQ     ??Serial_Display_Process_0
   \   00000C   1F83         SUB.W   #0x1, R15
   \   00000E   4824         JEQ     ??Serial_Display_Process_0
   \   000010   2F82         SUB.W   #0x4, R15
   \   000012   0724         JEQ     ??Serial_Display_Process_4
   \   000014   1F83         SUB.W   #0x1, R15
   \   000016   1524         JEQ     ??Serial_Display_Process_5
   \   000018   1F83         SUB.W   #0x1, R15
   \   00001A   2324         JEQ     ??Serial_Display_Process_6
   \   00001C   1F83         SUB.W   #0x1, R15
   \   00001E   3124         JEQ     ??Serial_Display_Process_7
   \   000020   1001         RETA
     54            case WAIT:
     55              /*strcpy(display_line[line1], "  Waiting ");
     56              update_string(display_line[line1], line1);
     57              display_changed = TRUE;*/
     58              break;
     59            case RECEIVED:                                // put received information on line 4
     60              //clear_line2();                              // clear transmit info
     61          
     62              break;
     63            case TRANSMITTING:
     64          
     65              break;
     66              
     67            case FORWARD_DISP:
     68                  lcd_BIG_mid();
   \                     ??Serial_Display_Process_4:
   \   000022   ........     CALLA   #lcd_BIG_mid
     69                  strcpy(display_line[line2], " Forward  ");
   \   000026   3D40....     MOV.W   #`?<Constant " Forward  ">`, R13
   \   00002A   3C40....     MOV.W   #display_line + 11, R12
   \   00002E   ........     CALLA   #strcpy
     70                  update_string(display_line[line2], line2);
   \   000032   1D43         MOV.W   #0x1, R13
   \   000034   3C40....     MOV.W   #display_line + 11, R12
   \   000038   ........     CALLA   #update_string
     71                  display_changed = TRUE;
   \   00003C   D243....     MOV.B   #0x1, &display_changed
     72              break;
   \   000040   1001         RETA
     73            case REVERSE_DISP:
     74                  lcd_BIG_mid();
   \                     ??Serial_Display_Process_5:
   \   000042   ........     CALLA   #lcd_BIG_mid
     75                  strcpy(display_line[line2], " Reverse  ");
   \   000046   3D40....     MOV.W   #`?<Constant " Reverse  ">`, R13
   \   00004A   3C40....     MOV.W   #display_line + 11, R12
   \   00004E   ........     CALLA   #strcpy
     76                  update_string(display_line[line2], line2);
   \   000052   1D43         MOV.W   #0x1, R13
   \   000054   3C40....     MOV.W   #display_line + 11, R12
   \   000058   ........     CALLA   #update_string
     77                  display_changed = TRUE;
   \   00005C   D243....     MOV.B   #0x1, &display_changed
     78              break;
   \   000060   1001         RETA
     79            case RIGHT_DISP:
     80                  lcd_BIG_mid();
   \                     ??Serial_Display_Process_6:
   \   000062   ........     CALLA   #lcd_BIG_mid
     81                  strcpy(display_line[line2], "Right Turn");
   \   000066   3D40....     MOV.W   #`?<Constant "Right Turn">`, R13
   \   00006A   3C40....     MOV.W   #display_line + 11, R12
   \   00006E   ........     CALLA   #strcpy
     82                  update_string(display_line[line2], line2);
   \   000072   1D43         MOV.W   #0x1, R13
   \   000074   3C40....     MOV.W   #display_line + 11, R12
   \   000078   ........     CALLA   #update_string
     83                  display_changed = TRUE;
   \   00007C   D243....     MOV.B   #0x1, &display_changed
     84              break;
   \   000080   1001         RETA
     85              case LEFT_DISP:
     86                  lcd_BIG_mid();
   \                     ??Serial_Display_Process_7:
   \   000082   ........     CALLA   #lcd_BIG_mid
     87                  strcpy(display_line[line2], "Left  Turn");
   \   000086   3D40....     MOV.W   #`?<Constant "Left  Turn">`, R13
   \   00008A   3C40....     MOV.W   #display_line + 11, R12
   \   00008E   ........     CALLA   #strcpy
     88                  update_string(display_line[line2], line2);
   \   000092   1D43         MOV.W   #0x1, R13
   \   000094   3C40....     MOV.W   #display_line + 11, R12
   \   000098   ........     CALLA   #update_string
     89                  display_changed = TRUE;
   \   00009C   D243....     MOV.B   #0x1, &display_changed
     90              break;
     91            default: break;
     92            }
     93            
     94          }
   \                     ??Serial_Display_Process_0:
   \   0000A0   1001         RETA
     95          

   \                                 In  segment CODE, align 2
     96          void main_display_process(void){
   \                     main_display_process:
     97            switch(display_state){
   \   000000   1F42....     MOV.W   &display_state, R15
   \   000004   0F83         SUB.W   #0x0, R15
   \   000006   0324         JEQ     ??main_display_process_2
   \   000008   2F83         SUB.W   #0x2, R15
   \   00000A   1324         JEQ     ??main_display_process_3
   \   00000C   1001         RETA
     98            case CALIBRATE:
     99                strcpy(display_line[line1], "Calibrate ");        // update display
   \                     ??main_display_process_2:
   \   00000E   3D40....     MOV.W   #`?<Constant "Calibrate ">`, R13
   \   000012   3C40....     MOV.W   #display_line, R12
   \   000016   ........     CALLA   #strcpy
    100                update_string(display_line[line1], line1);
   \   00001A   0D43         MOV.W   #0x0, R13
   \   00001C   ........     CALLA   #update_string
    101                display_changed = TRUE;
   \   000020   D243....     MOV.B   #0x1, &display_changed
    102                if(!calibrated){
   \   000024   8293....     CMP.W   #0x0, &calibrated
   \   000028   0220         JNE     ??main_display_process_4
    103                display_ADC();
   \   00002A   ........     BRA     #display_ADC
    104                }else{
    105                  clear_LCD();
   \                     ??main_display_process_4:
   \   00002E   ........     BRA     #clear_LCD
    106                }
    107              break;
    108            case BLACK_LINE_DISPLAY:
    109              display_timer();
   \                     ??main_display_process_3:
   \   000032   ........     CALLA   #display_timer
    110              if(BL_one_time){
   \   000036   8293....     CMP.W   #0x0, &BL_one_time
   \   00003A   1024         JEQ     ??main_display_process_5
    111                  HEXtoBCD(white_threshold);          // convert result to a string
   \   00003C   1C42....     MOV.W   &white_threshold, R12
   \   000040   ........     CALLA   #HEXtoBCD
    112                  adc_line4(POSITION_ONE);            // place string in display     
   \   000044   0C43         MOV.W   #0x0, R12
   \   000046   ........     CALLA   #adc_line4
    113                  HEXtoBCD(black_threshold);         // convert result to a string
   \   00004A   1C42....     MOV.W   &black_threshold, R12
   \   00004E   ........     CALLA   #HEXtoBCD
    114                  adc_line3(POSITION_ONE);            // place string in display
   \   000052   0C43         MOV.W   #0x0, R12
   \   000054   ........     CALLA   #adc_line3
    115                  BL_one_time = FALSE;
   \   000058   8243....     MOV.W   #0x0, &BL_one_time
    116                  
    117              }
    118              break;
    119            default: break;
    120            }
    121          }
   \                     ??main_display_process_5:
   \   00005C   1001         RETA
    122          

   \                                 In  segment CODE, align 2
    123          void display_timer(void){
   \                     display_timer:
    124                getCircleTime(circle_clock);
   \   000000   1C42....     MOV.W   &circle_clock, R12
   \   000004   ........     CALLA   #getCircleTime
    125                strcat(circle_timer, time_display_buffer);
   \   000008   3D40....     MOV.W   #time_display_buffer, R13
   \   00000C   3C40....     MOV.W   #circle_timer, R12
   \   000010   ........     CALLA   #strcat
    126                strcpy(display_line[line1], circle_timer);        // update display
   \   000014   0D4C         MOV.W   R12, R13
   \   000016   3C40....     MOV.W   #display_line, R12
   \   00001A   ........     CALLA   #strcpy
    127                update_string(display_line[line1], line1);
   \   00001E   0D43         MOV.W   #0x0, R13
   \   000020   ........     CALLA   #update_string
    128                display_changed = TRUE;
   \   000024   D243....     MOV.B   #0x1, &display_changed
    129          }
   \   000028   1001         RETA

   \                                 In  segment CODE, align 2
    130          void clear_LCD(void){
   \                     clear_LCD:
    131            strcpy(display_line[line1], "          ");
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   3C40....     MOV.W   #display_line, R12
   \   000008   ........     CALLA   #strcpy
    132            update_string(display_line[line1], line1);
   \   00000C   0D43         MOV.W   #0x0, R13
   \   00000E   ........     CALLA   #update_string
    133            strcpy(display_line[line2], "          ");
   \   000012   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000016   3C40....     MOV.W   #display_line + 11, R12
   \   00001A   ........     CALLA   #strcpy
    134            update_string(display_line[line2], line2);
   \   00001E   1D43         MOV.W   #0x1, R13
   \   000020   3C40....     MOV.W   #display_line + 11, R12
   \   000024   ........     CALLA   #update_string
    135            strcpy(display_line[line3], "          ");
   \   000028   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00002C   3C40....     MOV.W   #display_line + 22, R12
   \   000030   ........     CALLA   #strcpy
    136            update_string(display_line[line3], line3);
   \   000034   2D43         MOV.W   #0x2, R13
   \   000036   3C40....     MOV.W   #display_line + 22, R12
   \   00003A   ........     CALLA   #update_string
    137            strcpy(display_line[line4], "          ");
   \   00003E   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000042   3C40....     MOV.W   #display_line + 33, R12
   \   000046   ........     CALLA   #strcpy
    138            update_string(display_line[line4], line4);
   \   00004A   3D400300     MOV.W   #0x3, R13
   \   00004E   3C40....     MOV.W   #display_line + 33, R12
   \   000052   ........     CALLA   #update_string
    139            enable_display_update();
   \   000056   ........     CALLA   #enable_display_update
    140            display_changed = TRUE;
   \   00005A   D243....     MOV.B   #0x1, &display_changed
    141          }
   \   00005E   1001         RETA
    142          

   \                                 In  segment CODE, align 2
    143          void clear_line4(void){
   \                     clear_line4:
    144            strcpy(display_line[line4], "          ");
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   3C40....     MOV.W   #display_line + 33, R12
   \   000008   ........     CALLA   #strcpy
    145            update_string(display_line[line4], line4);
   \   00000C   3D400300     MOV.W   #0x3, R13
   \   000010   3C40....     MOV.W   #display_line + 33, R12
   \   000014   ........     CALLA   #update_string
    146            display_changed = TRUE;
   \   000018   D243....     MOV.B   #0x1, &display_changed
    147          }
   \   00001C   1001         RETA
    148          

   \                                 In  segment CODE, align 2
    149          void clear_line2(void){
   \                     clear_line2:
    150            strcpy(display_line[line2], "          ");
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   3C40....     MOV.W   #display_line + 11, R12
   \   000008   ........     CALLA   #strcpy
    151            update_string(display_line[line2], line2);
   \   00000C   1D43         MOV.W   #0x1, R13
   \   00000E   3C40....     MOV.W   #display_line + 11, R12
   \   000012   ........     CALLA   #update_string
    152            display_changed = TRUE;
   \   000016   D243....     MOV.B   #0x1, &display_changed
    153          }
   \   00001A   1001         RETA
    154          

   \                                 In  segment CODE, align 2
    155          void clear_line3(void){
   \                     clear_line3:
    156            strcpy(display_line[line3], "          ");
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   3C40....     MOV.W   #display_line + 22, R12
   \   000008   ........     CALLA   #strcpy
    157            update_string(display_line[line3], line3);
   \   00000C   2D43         MOV.W   #0x2, R13
   \   00000E   3C40....     MOV.W   #display_line + 22, R12
   \   000012   ........     CALLA   #update_string
    158            display_changed = TRUE;
   \   000016   D243....     MOV.B   #0x1, &display_changed
    159          }
   \   00001A   1001         RETA
    160          

   \                                 In  segment CODE, align 2
    161          void clear_line1(void){
   \                     clear_line1:
    162            strcpy(display_line[line1], "          ");
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   3C40....     MOV.W   #display_line, R12
   \   000008   ........     CALLA   #strcpy
    163            update_string(display_line[line1], line1);
   \   00000C   0D43         MOV.W   #0x0, R13
   \   00000E   ........     CALLA   #update_string
    164            display_changed = TRUE;
   \   000012   D243....     MOV.B   #0x1, &display_changed
    165          }
   \   000016   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for time_display_buffer>`:
   \   000000   732020202000 DC8 "s    "

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for BL_one_time>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Forward  ">`:
   \   000000   20466F727761 DC8 " Forward  "
   \            7264202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Reverse  ">`:
   \   000000   205265766572 DC8 " Reverse  "
   \            7365202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Right Turn">`:
   \   000000   526967687420 DC8 "Right Turn"
   \            5475726E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Left  Turn">`:
   \   000000   4C6566742020 DC8 "Left  Turn"
   \            5475726E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Calibrate ">`:
   \   000000   43616C696272 DC8 "Calibrate "
   \            6174652000  
    166            
    167            
    168            

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Chars
        4   -> enable_display_update
        4   -> strcpy
        4   -> update_string
      4   Serial_Display_Process
        4   -> lcd_BIG_mid
        4   -> strcpy
        4   -> update_string
      4   clear_LCD
        4   -> enable_display_update
        4   -> strcpy
        4   -> update_string
      4   clear_line1
        4   -> strcpy
        4   -> update_string
      4   clear_line2
        4   -> strcpy
        4   -> update_string
      4   clear_line3
        4   -> strcpy
        4   -> update_string
      4   clear_line4
        4   -> strcpy
        4   -> update_string
      4   display_timer
        4   -> getCircleTime
        4   -> strcat
        4   -> strcpy
        4   -> update_string
      4   main_display_process
        4   -> HEXtoBCD
        4   -> adc_line3
        4   -> adc_line4
        0   -> clear_LCD
        0   -> display_ADC
        4   -> display_timer
        4   -> strcpy
        4   -> update_string


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant " Forward  ">
      11  ?<Constant " Reverse  ">
      11  ?<Constant "Calibrate ">
      11  ?<Constant "Left  Turn">
      11  ?<Constant "Right Turn">
       2  ?<Initializer for BL_one_time>
       6  ?<Initializer for time_display_buffer>
       2  BL_one_time
      96  Init_Chars
     162  Serial_Display_Process
      96  clear_LCD
      24  clear_line1
      28  clear_line2
      28  clear_line3
      30  clear_line4
      42  display_timer
      94  main_display_process
       6  time_display_buffer

 
 600 bytes in segment CODE
  66 bytes in segment DATA16_C
   8 bytes in segment DATA16_I
   8 bytes in segment DATA16_ID
 
 600 bytes of CODE  memory
  74 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
