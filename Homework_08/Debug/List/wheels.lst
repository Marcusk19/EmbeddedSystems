###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           27/Mar/2020  20:02:40
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\platy\Desktop\ECE-306_Code\Homework_08\wheels.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EW1F35.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Homework_08\wheels.c -lC
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_08\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_08\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_08\Debug\List\wheels.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_08\Debug\Obj\wheels.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Homework_08\wheels.c
      1          //==============================================================================
      2          // Filename : wheels.c
      3          //
      4          // Description: This file contains the functions for wheel movement
      5          //
      6          // Author: Marcus Kok
      7          // Date: February 2020
      8          // Compiler: Built with IAR Embedded Workbench for MSP430 7.12.4
      9          //==============================================================================
     10          
     11          #include  "functions.h"
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
     13          #include "macros.h"
     14          
     15          //GLOBALS=======================================================================
     16          extern unsigned int myTime;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          int waitCount = RESET_STATE;
   \                     waitCount:
   \   000000                DS8 2
     18          extern unsigned int prevButton;
     19          extern unsigned int buttonPress;
     20          extern int wheelCount;
     21          
     22          extern volatile unsigned int wheel_state;
     23          
     24          extern unsigned int black_line_flag;
     25          extern unsigned int one_second_flag;
     26          extern unsigned int wait_count;
     27          
     28          extern unsigned int ADC_Left_Detect;
     29          extern unsigned int ADC_Right_Detect;
     30          //==============================================================================
     31          

   \                                 In  segment CODE, align 2
     32          void stop_Movement(void){
   \                     stop_Movement:
     33            RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   000000   82435404     MOV.W   #0x0, &0x454
     34            LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000004   82435604     MOV.W   #0x0, &0x456
     35            RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000008   82435804     MOV.W   #0x0, &0x458
     36            LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00000C   82435A04     MOV.W   #0x0, &0x45a
     37          }
   \   000010   1001         RETA
   \   000012                REQUIRE _A_TB3CCR1_L
   \   000012                REQUIRE _A_TB3CCR2_L
   \   000012                REQUIRE _A_TB3CCR3_L
   \   000012                REQUIRE _A_TB3CCR4_L
     38          

   \                                 In  segment CODE, align 2
     39          void move_Forward(void){
   \                     move_Forward:
     40            RIGHT_REVERSE_SPEED = WHEEL_OFF;          // right reverse off
   \   000000   82435804     MOV.W   #0x0, &0x458
     41            LEFT_REVERSE_SPEED = WHEEL_OFF;           // left reverse off
   \   000004   82435A04     MOV.W   #0x0, &0x45a
     42            RIGHT_FORWARD_SPEED = HALF_SPEED;               // right forward on
   \   000008   B240204E5404 MOV.W   #0x4e20, &0x454
     43            LEFT_FORWARD_SPEED = HALF_SPEED;                // left forward on 
   \   00000E   B240204E5604 MOV.W   #0x4e20, &0x456
     44          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_TB3CCR3_L
   \   000016                REQUIRE _A_TB3CCR4_L
   \   000016                REQUIRE _A_TB3CCR1_L
   \   000016                REQUIRE _A_TB3CCR2_L
     45          

   \                                 In  segment CODE, align 2
     46          void move_Reverse(void){
   \                     move_Reverse:
     47            RIGHT_FORWARD_SPEED = WHEEL_OFF;          // right foward off
   \   000000   82435404     MOV.W   #0x0, &0x454
     48            LEFT_FORWARD_SPEED = WHEEL_OFF;           // left forward off
   \   000004   82435604     MOV.W   #0x0, &0x456
     49            RIGHT_REVERSE_SPEED = FAST;               // right reverse on
   \   000008   B24030755804 MOV.W   #0x7530, &0x458
     50            LEFT_REVERSE_SPEED = HALF_SPEED;          // left reverse on 
   \   00000E   B240204E5A04 MOV.W   #0x4e20, &0x45a
     51          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_TB3CCR1_L
   \   000016                REQUIRE _A_TB3CCR2_L
   \   000016                REQUIRE _A_TB3CCR3_L
   \   000016                REQUIRE _A_TB3CCR4_L
     52          

   \                                 In  segment CODE, align 2
     53          void spin_CW(void){
   \                     spin_CW:
     54            RIGHT_FORWARD_SPEED = WHEEL_OFF;          // right forward off
   \   000000   82435404     MOV.W   #0x0, &0x454
     55            LEFT_REVERSE_SPEED = WHEEL_OFF;           // left reverese off
   \   000004   82435A04     MOV.W   #0x0, &0x45a
     56            RIGHT_REVERSE_SPEED = FAST;               // right reverse on 
   \   000008   B24030755804 MOV.W   #0x7530, &0x458
     57            LEFT_FORWARD_SPEED = SLOW;                // left forward on
   \   00000E   B24010275604 MOV.W   #0x2710, &0x456
     58          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_TB3CCR1_L
   \   000016                REQUIRE _A_TB3CCR4_L
   \   000016                REQUIRE _A_TB3CCR3_L
   \   000016                REQUIRE _A_TB3CCR2_L
     59          

   \                                 In  segment CODE, align 2
     60          void spin_CCW(void){
   \                     spin_CCW:
     61            LEFT_FORWARD_SPEED = WHEEL_OFF;           // left forward off
   \   000000   82435604     MOV.W   #0x0, &0x456
     62            RIGHT_REVERSE_SPEED = WHEEL_OFF;          // right reverse off
   \   000004   82435804     MOV.W   #0x0, &0x458
     63            LEFT_REVERSE_SPEED = FAST;                // left reverse on
   \   000008   B24030755A04 MOV.W   #0x7530, &0x45a
     64            RIGHT_FORWARD_SPEED = SLOW;               // right forward on
   \   00000E   B24010275404 MOV.W   #0x2710, &0x454
     65          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_TB3CCR2_L
   \   000016                REQUIRE _A_TB3CCR3_L
   \   000016                REQUIRE _A_TB3CCR4_L
   \   000016                REQUIRE _A_TB3CCR1_L
     66          

   \                                 In  segment CODE, align 2
     67          void turn_CW(void){
   \                     turn_CW:
     68            LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   000000   82435A04     MOV.W   #0x0, &0x45a
     69            RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000004   82435804     MOV.W   #0x0, &0x458
     70            RIGHT_FORWARD_SPEED = SLOW;
   \   000008   B24010275404 MOV.W   #0x2710, &0x454
     71            LEFT_FORWARD_SPEED = FAST;
   \   00000E   B24030755604 MOV.W   #0x7530, &0x456
     72          }
   \   000014   1001         RETA
   \   000016                REQUIRE _A_TB3CCR4_L
   \   000016                REQUIRE _A_TB3CCR3_L
   \   000016                REQUIRE _A_TB3CCR1_L
   \   000016                REQUIRE _A_TB3CCR2_L
     73          
     74          

   \                                 In  segment CODE, align 2
     75          void wheel_control(void){
   \                     wheel_control:
     76              switch(wheel_state){
   \   000000   1F42....     MOV.W   &wheel_state, R15
   \   000004   0F83         SUB.W   #0x0, R15
   \   000006   0524         JEQ     ??wheel_control_4
   \   000008   1F83         SUB.W   #0x1, R15
   \   00000A   1824         JEQ     ??wheel_control_5
   \   00000C   1F83         SUB.W   #0x1, R15
   \   00000E   3024         JEQ     ??wheel_control_6
   \   000010   1001         RETA
     77              case HOLD:
     78                stop_Movement();
   \                     ??wheel_control_4:
   \   000012   ........     CALLA   #stop_Movement
     79                if(black_line_flag){
   \   000016   8293....     CMP.W   #0x0, &black_line_flag
   \   00001A   3624         JEQ     ??wheel_control_3
     80                  if(one_second_flag){
   \   00001C   8293....     CMP.W   #0x0, &one_second_flag
   \   000020   0224         JEQ     ??wheel_control_7
     81                    wait_count++;
   \   000022   9253....     ADD.W   #0x1, &wait_count
     82                  }
     83                  if(wait_count == WAIT_SECONDS){
   \                     ??wheel_control_7:
   \   000026   B2900A00.... CMP.W   #0xa, &wait_count
   \   00002C   2D20         JNE     ??wheel_control_3
     84                    black_line_flag = FALSE;
   \   00002E   8243....     MOV.W   #0x0, &black_line_flag
     85                    wait_count = RESET_STATE;
   \   000032   8243....     MOV.W   #0x0, &wait_count
     86                    wheel_state = TURN_AROUND;
   \   000036   A243....     MOV.W   #0x2, &wheel_state
     87                  }
     88                }
     89                break;
   \   00003A   1001         RETA
     90              case MOVE_FORWARD:
     91                if(one_second_flag){
   \                     ??wheel_control_5:
   \   00003C   8293....     CMP.W   #0x0, &one_second_flag
   \   000040   0224         JEQ     ??wheel_control_8
     92                  wait_count++;
   \   000042   9253....     ADD.W   #0x1, &wait_count
     93                }
     94                if(wait_count > WAIT_SECONDS){
   \                     ??wheel_control_8:
   \   000046   B2900B00.... CMP.W   #0xb, &wait_count
   \   00004C   0228         JNC     ??wheel_control_9
     95                move_Forward();
   \   00004E   ........     CALLA   #move_Forward
     96                }
     97                if(ADC_Left_Detect > BLACK_THRESHOLD || ADC_Right_Detect > BLACK_THRESHOLD){
   \                     ??wheel_control_9:
   \   000052   B2902D01.... CMP.W   #0x12d, &ADC_Left_Detect
   \   000058   042C         JC      ??wheel_control_10
   \   00005A   B2902D01.... CMP.W   #0x12d, &ADC_Right_Detect
   \   000060   1328         JNC     ??wheel_control_3
     98                  wheel_state = HOLD;
   \                     ??wheel_control_10:
   \   000062   8243....     MOV.W   #0x0, &wheel_state
     99                  black_line_flag = TRUE;
   \   000066   9243....     MOV.W   #0x1, &black_line_flag
    100                  wait_count = RESET_STATE;
   \   00006A   8243....     MOV.W   #0x0, &wait_count
    101                }
    102                break;
   \   00006E   1001         RETA
    103              case TURN_AROUND: 
    104                spin_CW();
   \                     ??wheel_control_6:
   \   000070   ........     CALLA   #spin_CW
    105                if(ADC_Right_Detect > BLACK_THRESHOLD && ADC_Left_Detect > BLACK_THRESHOLD){
   \   000074   B2902D01.... CMP.W   #0x12d, &ADC_Right_Detect
   \   00007A   0628         JNC     ??wheel_control_3
   \   00007C   B2902D01.... CMP.W   #0x12d, &ADC_Left_Detect
   \   000082   0228         JNC     ??wheel_control_3
    106                  wheel_state = HOLD;
   \   000084   8243....     MOV.W   #0x0, &wheel_state
    107                }
    108                break;   
    109              default: break;
    110              }
    111          }
   \                     ??wheel_control_3:
   \   000088   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   move_Forward
      4   move_Reverse
      4   spin_CCW
      4   spin_CW
      4   stop_Movement
      4   turn_CW
      4   wheel_control
        4   -> move_Forward
        4   -> spin_CW
        4   -> stop_Movement


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
      22  move_Forward
      22  move_Reverse
      22  spin_CCW
      22  spin_CW
      18  stop_Movement
      22  turn_CW
       2  waitCount
     138  wheel_control

 
 266 bytes in segment CODE
   8 bytes in segment DATA16_AN
   2 bytes in segment DATA16_Z
 
 266 bytes of CODE memory
   2 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
