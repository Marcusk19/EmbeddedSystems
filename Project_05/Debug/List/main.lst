###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           23/Feb/2020  14:58:13
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\platy\Desktop\ECE-306_Code\Project_05\main.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EW327.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Project_05\main.c -lC
#        C:\Users\platy\Desktop\ECE-306_Code\Project_05\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Project_05\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_05\Debug\List\main.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_05\Debug\Obj\main.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Project_05\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include "macros.h"
     15          #include <string.h>
     16          
     17          
     18          // Function Prototypes
     19          void main(void);
     20          void Init_Conditions(void);
     21          void Init_LEDs(void);
     22          
     23            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     25          extern char display_line[numLines][strSize];
     26          extern char *display[numLines];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     28          extern volatile unsigned char display_changed;
     29          extern volatile unsigned char update_display;
     30          extern volatile unsigned int update_display_count;
     31          extern volatile unsigned int Time_Sequence;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int prevTime_Sequence = RESET_STATE; 
   \                     prevTime_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          unsigned int myTime = RESET_STATE;
   \                     myTime:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int buttonState = HOLD; //initialize state to be circle
   \                     buttonState:
   \   000000                DS8 2
     35          extern volatile char one_time;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          unsigned int num_presses = RESET_STATE;
   \                     num_presses:
   \   000000                DS8 2
     40          extern unsigned int Display_State;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          volatile unsigned int wheel_state = HOLD;
   \                     wheel_state:
   \   000000                DS8 2
     42          

   \                                 In  segment CODE, align 2
     43          void main(void){
   \                     main:
     44          //------------------------------------------------------------------------------
     45          // Main Program
     46          // This is the main routine for the program. Execution of code starts here.
     47          // The operating system is Back Ground Fore Ground.
     48          //
     49          //------------------------------------------------------------------------------
     50          // Disable the GPIO power-on default high-impedance mode to activate
     51          // previously configured port settings
     52            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     53            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     54            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     55            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     56            Init_Timers();  // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     57            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     58            Init_Wheels();
   \   000018   ........     CALLA   #Init_Wheels
     59          // Place the contents of what you want on the display, in between the quotes
     60          // Limited to 10 characters per line
     61          //
     62          
     63            strcpy(display_line[line1], "          ");
   \   00001C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000020   3C40....     MOV.W   #display_line, R12
   \   000024   ........     CALLA   #strcpy
     64            update_string(display_line[line1], line1);
   \   000028   0D43         MOV.W   #0x0, R13
   \   00002A   ........     CALLA   #update_string
     65            strcpy(display_line[line2], "   Hold  ");
   \   00002E   3D40....     MOV.W   #`?<Constant "   Hold  ">`, R13
   \   000032   3C40....     MOV.W   #display_line + 11, R12
   \   000036   ........     CALLA   #strcpy
     66            update_string(display_line[line2], line2);
   \   00003A   1D43         MOV.W   #0x1, R13
   \   00003C   3C40....     MOV.W   #display_line + 11, R12
   \   000040   ........     CALLA   #update_string
     67            strcpy(display_line[line3], "          ");
   \   000044   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000048   3C40....     MOV.W   #display_line + 22, R12
   \   00004C   ........     CALLA   #strcpy
     68            update_string(display_line[line3], line3);
   \   000050   2D43         MOV.W   #0x2, R13
   \   000052   3C40....     MOV.W   #display_line + 22, R12
   \   000056   ........     CALLA   #update_string
     69            strcpy(display_line[line4], "          ");
   \   00005A   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00005E   3C40....     MOV.W   #display_line + 33, R12
   \   000062   ........     CALLA   #strcpy
     70            update_string(display_line[line4], line4);
   \   000066   3D400300     MOV.W   #0x3, R13
   \   00006A   3C40....     MOV.W   #display_line + 33, R12
   \   00006E   ........     CALLA   #update_string
     71            enable_display_update();
   \   000072   ........     CALLA   #enable_display_update
     72            display_changed = TRUE;
   \   000076   D243....     MOV.B   #0x1, &display_changed
     73          
     74          
     75          //------------------------------------------------------------------------------
     76          // Begining of the "While" Operating System
     77          //------------------------------------------------------------------------------
     78          while(ALWAYS){  // Can the Operating system run
     79                // Check for switch state change
     80              Display_Process(); 
   \                     ??main_0:
   \   00007A   ........     CALLA   #Display_Process
   \   00007E   FD3F         JMP     ??main_0
   \   000080   0343         NOP
   \   000082                REQUIRE _A_PM5CTL0_L
     81              //clock_process(); // update myTime
     82              //Switches_Process(); //check switches
     83          
     84            }
     85          //------------------------------------------------------------------------------
     86          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   Hold  ">`:
   \   000000   202020486F6C DC8 "   Hold  "
   \            64202000    
     87          
     88          
     89          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Init_Wheels
        4   -> enable_display_update
        4   -> strcpy
        4   -> update_string


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      10  ?<Constant "   Hold  ">
       2  _A_PM5CTL0_L
       2  buttonState
       1  change
       1  chosen_direction
       1  display_mode
     130  main
       2  myTime
       2  num_presses
       2  prevTime_Sequence
       1  slow_input_down
       2  test_value
       2  wheel_state

 
 130 bytes in segment CODE
   2 bytes in segment DATA16_AN
  21 bytes in segment DATA16_C
  16 bytes in segment DATA16_Z
 
 130 bytes of CODE  memory
  21 bytes of CONST memory
  16 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
