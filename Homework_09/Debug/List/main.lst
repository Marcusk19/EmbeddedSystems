###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           03/Apr/2020  15:30:47
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\platy\Desktop\ECE-306_Code\Homework_09\main.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EWD862.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Homework_09\main.c -lC
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_09\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_09\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_09\Debug\List\main.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_09\Debug\Obj\main.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Homework_09\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include "macros.h"
     15          #include <string.h>
     16          
     17          
     18          // Function Prototypes
     19          void main(void);
     20          void Init_Conditions(void);
     21          void Init_LEDs(void);
     22          
     23            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     25          extern char display_line[numLines][strSize];
     26          extern char *display[numLines];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     28          extern volatile unsigned char display_changed;
     29          extern volatile unsigned char update_display;
     30          extern volatile unsigned int update_display_count;
     31          extern volatile unsigned int Time_Sequence;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int prevTime_Sequence = RESET_STATE; 
   \                     prevTime_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          unsigned int myTime = RESET_STATE;
   \                     myTime:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int buttonState = HOLD; //initialize state to be circle
   \                     buttonState:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     35          volatile char one_time = TRUE;
   \                     one_time:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for one_time>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     39          unsigned int emitter_display_change = TRUE;
   \                     emitter_display_change:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for emitter_display_change>`
     40          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     41          volatile unsigned int wheel_state = HOLD;
   \                     wheel_state:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          volatile unsigned int main_state = HOLD;
   \                     main_state:
   \   000000                DS8 2
     43          extern volatile unsigned int next_state;
     44          extern int display_state;
     45          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     46          unsigned int black_line_flag = FALSE;
   \                     black_line_flag:
   \   000000                DS8 2
     47          extern unsigned int one_second_flag;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     48          unsigned int main_wait_count = RESET_STATE;
   \                     main_wait_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          unsigned int wait_count = RESET_STATE;
   \                     wait_count:
   \   000000                DS8 2
     50          
     51          extern unsigned int ADC_Left_Detect;
     52          extern unsigned int ADC_Right_Detect;
     53          
     54          
     55          
     56          extern unsigned int usb_rx_ring_rd;
     57          extern volatile unsigned int usb_rx_ring_wr;
     58          extern volatile char USB_Char_Rx[SMALL_RING_SIZE];
     59          extern int UCA0_index;
     60          extern int UCA1_index;
     61          extern char receive_char[MAX_STR_SIZE];
     62          extern char transmit_char[MAX_STR_SIZE];
     63          
     64          extern unsigned int Button_One;
     65          extern unsigned int Button_Two;
     66          
     67          
     68          

   \                                 In  segment CODE, align 2
     69          void main(void){
   \                     main:
     70          //------------------------------------------------------------------------------
     71          // Main Program
     72          // This is the main routine for the program. Execution of code starts here.
     73          // The operating system is Back Ground Fore Ground.
     74          //
     75          //------------------------------------------------------------------------------
     76          // Disable the GPIO power-on default high-impedance mode to activate
     77          // previously configured port settings
     78            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     79            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     80            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     81            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     82            Init_Timers();                        // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     83            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     84            Init_Wheels();
   \   000018   ........     CALLA   #Init_Wheels
     85            Init_ADC();
   \   00001C   ........     CALLA   #Init_ADC
     86            Init_Serial_UCA0();                   // Initialize Serial communication
   \   000020   ........     CALLA   #Init_Serial_UCA0
     87            Init_Serial_UCA1();
   \   000024   ........     CALLA   #Init_Serial_UCA1
     88            Init_Chars();                         // Initialize char display on screen
   \   000028   ........     CALLA   #Init_Chars
     89            
     90          // Place the contents of what you want on the display, in between the quotes
     91          // Limited to 10 characters per line
     92          //
     93          
     94          
     95          
     96            UCA0_index = RESET_STATE;
   \   00002C   8243....     MOV.W   #0x0, &UCA0_index
     97            UCA1_index = RESET_STATE;
   \   000030   8243....     MOV.W   #0x0, &UCA1_index
     98          
     99          //------------------------------------------------------------------------------
    100          // Begining of the "While" Operating System
    101          //------------------------------------------------------------------------------
    102            while(ALWAYS){  // Can the Operating system run
    103              switch(main_state){
   \                     ??main_0:
   \   000034   1F42....     MOV.W   &main_state, R15
   \   000038   0F83         SUB.W   #0x0, R15
   \   00003A   0324         JEQ     ??main_3
   \   00003C   3F82         SUB.W   #0x8, R15
   \   00003E   2624         JEQ     ??main_4
   \   000040   273C         JMP     ??main_1
    104              case HOLD:
    105                lcd_BIG_mid();
   \                     ??main_3:
   \   000042   ........     CALLA   #lcd_BIG_mid
    106                strcpy(display_line[line1], "Marcus    ");
   \   000046   3D40....     MOV.W   #`?<Constant "Marcus    ">`, R13
   \   00004A   3C40....     MOV.W   #display_line, R12
   \   00004E   ........     CALLA   #strcpy
    107                update_string(display_line[line1], line1);
   \   000052   0D43         MOV.W   #0x0, R13
   \   000054   ........     CALLA   #update_string
    108                strcpy(display_line[line3], "HW #9     ");
   \   000058   3D40....     MOV.W   #`?<Constant "HW #9     ">`, R13
   \   00005C   3C40....     MOV.W   #display_line + 22, R12
   \   000060   ........     CALLA   #strcpy
    109                update_string(display_line[line3], line3);
   \   000064   2D43         MOV.W   #0x2, R13
   \   000066   3C40....     MOV.W   #display_line + 22, R12
   \   00006A   ........     CALLA   #update_string
    110                display_changed = TRUE;
   \   00006E   D243....     MOV.B   #0x1, &display_changed
    111                if(Button_One || Button_Two){
   \   000072   8293....     CMP.W   #0x0, &Button_One
   \   000076   0320         JNE     ??main_5
   \   000078   8293....     CMP.W   #0x0, &Button_Two
   \   00007C   0924         JEQ     ??main_1
    112                  Button_One = FALSE;
   \                     ??main_5:
   \   00007E   8243....     MOV.W   #0x0, &Button_One
    113                  Button_Two = FALSE;
   \   000082   8243....     MOV.W   #0x0, &Button_Two
    114                  main_state = MENU;
   \   000086   B242....     MOV.W   #0x8, &main_state
    115                }
    116                break;
   \   00008A   023C         JMP     ??main_1
    117              case MENU:
    118                menu_process();
   \                     ??main_4:
   \   00008C   ........     CALLA   #menu_process
    119              break;
    120              default: break;
    121              }
    122              Display_Process(); 
   \                     ??main_1:
   \   000090   ........     CALLA   #Display_Process
   \   000094   CF3F         JMP     ??main_0
   \   000096   0343         NOP
   \   000098                REQUIRE _A_PM5CTL0_L
    123              //Serial_Display_Process();
    124              //clock_process(); // update myTime
    125              //Switches_Process(); //check switches
    126            }
    127          
    128          //------------------------------------------------------------------------------
    129          }
    130          

   \                                 In  segment CODE, align 2
    131          void clear_receive_char(void){
   \                     clear_receive_char:
    132            for(int i = BEGINNING; i < MAX_STR_SIZE; i++){
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??clear_receive_char_0:
   \   000002   3F900B00     CMP.W   #0xb, R15
   \   000006   0434         JGE     ??clear_receive_char_1
    133              receive_char[i] = NULL;
   \   000008   CF43....     MOV.B   #0x0, receive_char(R15)
    134            }
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??clear_receive_char_0
    135          }
   \                     ??clear_receive_char_1:
   \   000010   1001         RETA
    136          

   \                                 In  segment CODE, align 2
    137          void clear_transmit_char(void){
   \                     clear_transmit_char:
    138            for(int i = BEGINNING; i < MAX_STR_SIZE; i++){
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??clear_transmit_char_0:
   \   000002   3F900B00     CMP.W   #0xb, R15
   \   000006   0434         JGE     ??clear_transmit_char_1
    139              transmit_char[i] = NULL;
   \   000008   CF43....     MOV.B   #0x0, transmit_char(R15)
    140            }
   \   00000C   1F53         ADD.W   #0x1, R15
   \   00000E   F93F         JMP     ??clear_transmit_char_0
    141          }
   \                     ??clear_transmit_char_1:
   \   000010   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for one_time>`:
   \   000000   01           DC8 1

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for emitter_display_change>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Marcus    ">`:
   \   000000   4D6172637573 DC8 "Marcus    "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "HW #9     ">`:
   \   000000   485720233920 DC8 "HW #9     "
   \            2020202000  
    142            

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   clear_receive_char
      4   clear_transmit_char
      4   main
        4   -> Display_Process
        4   -> Init_ADC
        4   -> Init_Chars
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Serial_UCA0
        4   -> Init_Serial_UCA1
        4   -> Init_Timers
        4   -> Init_Wheels
        4   -> lcd_BIG_mid
        4   -> menu_process
        4   -> strcpy
        4   -> update_string


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "HW #9     ">
      11  ?<Constant "Marcus    ">
       2  ?<Initializer for emitter_display_change>
       1  ?<Initializer for one_time>
       2  _A_PM5CTL0_L
       2  black_line_flag
       2  buttonState
       1  change
       1  chosen_direction
      18  clear_receive_char
      18  clear_transmit_char
       1  display_mode
       2  emitter_display_change
     152  main
       2  main_state
       2  main_wait_count
       2  myTime
       1  one_time
       2  prevTime_Sequence
       1  slow_input_down
       2  test_value
       2  wait_count
       2  wheel_state

 
 188 bytes in segment CODE
   2 bytes in segment DATA16_AN
  22 bytes in segment DATA16_C
   3 bytes in segment DATA16_I
   3 bytes in segment DATA16_ID
  22 bytes in segment DATA16_Z
 
 188 bytes of CODE  memory
  25 bytes of CONST memory
  25 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
