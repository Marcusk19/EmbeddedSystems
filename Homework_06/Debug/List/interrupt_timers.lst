###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           21/Feb/2020  15:45:59
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_06\interrupt_timers.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EWDDE.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Homework_06\interrupt_timers.c
#        -lC C:\Users\platy\Desktop\ECE-306_Code\Homework_06\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_06\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_06\Debug\List\interrupt_timers.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_06\Debug\Obj\interrupt_timers.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Homework_06\interrupt_timers.c
      1          //==============================================================================
      2          // Filename : interrupts.c
      3          //
      4          // Description: This file contains the interrupt service routines
      5          //
      6          // Author: Marcus Kok
      7          // Date: February 2020
      8          // Compiler: Built with IAR Embedded Workbench for MSP430 7.12.4
      9          //==============================================================================
     10          
     11          #include "macros.h"
     12          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2
     13          #include "functions.h"
     14          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          volatile unsigned int CCR0_COUNT = RESET_STATE;
   \                     CCR0_COUNT:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile unsigned int display_count = RESET_STATE;
   \                     display_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int debounce_count_SW1 = RESET_STATE;
   \                     debounce_count_SW1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int debounce_count_SW2 = RESET_STATE;
   \                     debounce_count_SW2:
   \   000000                DS8 2
     19          extern unsigned int debounce_flag_SW1;
     20          extern unsigned int debounce_flag_SW2;
     21          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          volatile unsigned int Time_Sequence = RESET_STATE;
   \                     Time_Sequence:
   \   000000                DS8 2
     23          extern volatile unsigned char update_display;
     24          extern volatile unsigned int update_display_count;
     25          
     26          //------------------------------------------------------------------------------
     27          // CCR0 interrupt 
     28          
     29          #pragma vector = TIMER0_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     30          __interrupt void TIMER0_B0_ISR(void){
   \                     TIMER0_B0_ISR:
     31            // timer interrupt B0 handler
     32            CCR0_COUNT++;
   \   000000   9253....     ADD.W   #0x1, &CCR0_COUNT
     33            display_count++;
   \   000004   9253....     ADD.W   #0x1, &display_count
     34            if(CCR0_COUNT == TB0CCR0_CYCLES){
   \   000008   B2900A00.... CMP.W   #0xa, &CCR0_COUNT
   \   00000E   0D20         JNE     ??TIMER0_B0_ISR_1
     35              if(P6OUT & LCD_BACKLITE){
   \   000010   F2B010004302 BIT.B   #0x10, &0x243
   \   000016   0428         JNC     ??TIMER0_B0_ISR_2
     36                P6OUT &= ~LCD_BACKLITE;
   \   000018   F2C010004302 BIC.B   #0x10, &0x243
   \   00001E   033C         JMP     ??TIMER0_B0_ISR_0
     37              }
     38              else{
     39                P6OUT |= LCD_BACKLITE;
   \                     ??TIMER0_B0_ISR_2:
   \   000020   F2D010004302 BIS.B   #0x10, &0x243
     40              }
     41              CCR0_COUNT = RESET_STATE;
   \                     ??TIMER0_B0_ISR_0:
   \   000026   8243....     MOV.W   #0x0, &CCR0_COUNT
     42            }
     43            if(display_count > UPDATE_DISPLAY_THRESHOLD){
   \                     ??TIMER0_B0_ISR_1:
   \   00002A   B2900500.... CMP.W   #0x5, &display_count
   \   000030   0428         JNC     ??TIMER0_B0_ISR_3
     44                update_display = TRUE; // set update display true
   \   000032   D243....     MOV.B   #0x1, &update_display
     45                display_count = RESET_STATE; //reset count
   \   000036   8243....     MOV.W   #0x0, &display_count
     46              }
     47            TB0CCR0 += TB0CCR0_INTERVAL;
   \                     ??TIMER0_B0_ISR_3:
   \   00003A   B250A8619203 ADD.W   #0x61a8, &0x392
     48          }
   \   000040   0013         RETI
   \   000042                REQUIRE _A_PCOUT_L
   \   000042                REQUIRE _A_TB0CCR0_L
     49          
     50          #pragma vector = TIMER0_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     51          __interrupt void TIMER0_B1_ISR(void){
   \                     TIMER0_B1_ISR:
   \   000000   0F12         PUSH.W  R15
     52            //Timer B0 1-2 overflow interrupt vector (TBIV) handler
     53            
     54            switch(__even_in_range(TB0IV, OVERFLOW)){
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMER0_B1_ISR>_0`:
   \   000008   423C         JMP     ??TIMER0_B1_ISR_1
   \   00000A   063C         JMP     ??TIMER0_B1_ISR_5
   \   00000C   353C         JMP     ??TIMER0_B1_ISR_6
   \   00000E   3F3C         JMP     ??TIMER0_B1_ISR_1
   \   000010   3E3C         JMP     ??TIMER0_B1_ISR_1
   \   000012   3D3C         JMP     ??TIMER0_B1_ISR_1
   \   000014   3C3C         JMP     ??TIMER0_B1_ISR_1
   \   000016   3B3C         JMP     ??TIMER0_B1_ISR_1
     55            case NO_INTERRUPT: break; // no interrupt
     56            case CCR1PORT:       // CCR1 not used
     57          //---------------------- debounce timer interrupt --------------------------
     58                if(debounce_flag_SW1){
   \                     ??TIMER0_B1_ISR_5:
   \   000018   8293....     CMP.W   #0x0, &debounce_flag_SW1
   \   00001C   1324         JEQ     ??TIMER0_B1_ISR_2
     59                   debounce_count_SW1++;
   \   00001E   9253....     ADD.W   #0x1, &debounce_count_SW1
     60                   if(debounce_count_SW1 > DEBOUNCE_THRESHOLD){
   \   000022   B2900600.... CMP.W   #0x6, &debounce_count_SW1
   \   000028   0D28         JNC     ??TIMER0_B1_ISR_2
     61                      P4IE |= SW1;                      // re-enable SW1 interrupt
   \   00002A   E2D33B02     BIS.B   #0x2, &0x23b
     62                      debounce_flag_SW1 = FALSE;        // flag set to false
   \   00002E   8243....     MOV.W   #0x0, &debounce_flag_SW1
     63                      if(!debounce_flag_SW2){
   \   000032   8293....     CMP.W   #0x0, &debounce_flag_SW2
   \   000036   0620         JNE     ??TIMER0_B1_ISR_2
     64                        TB0CCTL0 |= CCIE;               // enable CCR0 interrupt
   \   000038   B2D010008203 BIS.W   #0x10, &0x382
     65                        TB0CCTL1 &= ~CCIE;              // disable debounce timer interrupt
   \   00003E   B2C010008403 BIC.W   #0x10, &0x384
     66                      }
     67                   }
     68                  }
     69            //---------------------------- SW2--------------------------------------------- 
     70                if(debounce_flag_SW2){
   \                     ??TIMER0_B1_ISR_2:
   \   000044   8293....     CMP.W   #0x0, &debounce_flag_SW2
   \   000048   1324         JEQ     ??TIMER0_B1_ISR_3
     71                    debounce_count_SW2++;
   \   00004A   9253....     ADD.W   #0x1, &debounce_count_SW2
     72                    if(debounce_count_SW2 > DEBOUNCE_THRESHOLD){
   \   00004E   B2900600.... CMP.W   #0x6, &debounce_count_SW2
   \   000054   0D28         JNC     ??TIMER0_B1_ISR_3
     73                      P2IE |= SW2;                      // re-enable SW2 interrupt
   \   000056   F2D21B02     BIS.B   #0x8, &0x21b
     74                      debounce_flag_SW2 = FALSE;        // flag set to false
   \   00005A   8243....     MOV.W   #0x0, &debounce_flag_SW2
     75                      if(!debounce_flag_SW1){
   \   00005E   8293....     CMP.W   #0x0, &debounce_flag_SW1
   \   000062   0620         JNE     ??TIMER0_B1_ISR_3
     76                        TB0CCTL0 |= CCIE;               // re-enable CCR0 interrupt
   \   000064   B2D010008203 BIS.W   #0x10, &0x382
     77                        TB0CCTL1 &= ~CCIE;              //disable timer interrupt
   \   00006A   B2C010008403 BIC.W   #0x10, &0x384
     78                      } 
     79                    }
     80                  }
     81                TB0CCR1 += TB0CCR1_INTERVAL; // add offset to TBCCR1
   \                     ??TIMER0_B1_ISR_3:
   \   000070   B25088139403 ADD.W   #0x1388, &0x394
     82              break;
   \   000076   0B3C         JMP     ??TIMER0_B1_ISR_1
     83            case CCR2PORT:                       // CCR2 not used  
     84              Time_Sequence++;
   \                     ??TIMER0_B1_ISR_6:
   \   000078   9253....     ADD.W   #0x1, &Time_Sequence
     85              if(Time_Sequence > TIME_SEQUENCE_CYCLES){
   \   00007C   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   000082   0228         JNC     ??TIMER0_B1_ISR_4
     86                Time_Sequence = RESET_STATE;
   \   000084   8243....     MOV.W   #0x0, &Time_Sequence
     87              }
     88              TB0CCR2 += TB0CCR2_INTERVAL;
                                ^
Warning[Pe174]: expression has no effect
   \                     ??TIMER0_B1_ISR_4:
   \   000088   924296039603 MOV.W   &0x396, &0x396
     89              break; 
     90            case OVERFLOW:                     //overflow
     91              //implementation
     92              break;
     93            default: break;
     94            }
     95          }
   \                     ??TIMER0_B1_ISR_1:
   \   00008E   3F41         POP.W   R15
   \   000090   0013         RETI
   \   000092                REQUIRE _A_PBIE_L
   \   000092                REQUIRE _A_TB0CCTL0_L
   \   000092                REQUIRE _A_TB0CCTL1_L
   \   000092                REQUIRE _A_PAIE_L
   \   000092                REQUIRE _A_TB0CCR1_L
   \   000092                REQUIRE _A_TB0CCR2_L
   \   000092                REQUIRE _A_TB0IV_L

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??TIMER0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    TIMER0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??TIMER0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    TIMER0_B0_ISR
     96          
     97          
     98          
     99          
    100          
    101            

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   TIMER0_B0_ISR
      6   TIMER0_B1_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  CCR0_COUNT
      66  TIMER0_B0_ISR
       2  TIMER0_B0_ISR::??INTVEC 86
     146  TIMER0_B1_ISR
       2  TIMER0_B1_ISR::??INTVEC 84
       2  Time_Sequence
       2  _A_PAIE_L
       2  _A_PBIE_L
       2  _A_PCOUT_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL1_L
       2  _A_TB0IV_L
       2  debounce_count_SW1
       2  debounce_count_SW2
       2  display_count

 
  18 bytes in segment DATA16_AN
  10 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 212 bytes in segment ISR_CODE
 
 212 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
  10 bytes of DATA  memory (+ 18 bytes shared)

Errors: none
Warnings: 1
