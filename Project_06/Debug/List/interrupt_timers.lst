###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           02/Mar/2020  14:38:43
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_06\interrupt_timers.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EW1865.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Project_06\interrupt_timers.c -lC
#        C:\Users\platy\Desktop\ECE-306_Code\Project_06\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Project_06\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_06\Debug\List\interrupt_timers.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_06\Debug\Obj\interrupt_timers.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Project_06\interrupt_timers.c
      1          //==============================================================================
      2          // Filename : interrupts.c
      3          //
      4          // Description: This file contains the interrupt service routines
      5          //
      6          // Author: Marcus Kok
      7          // Date: February 2020
      8          // Compiler: Built with IAR Embedded Workbench for MSP430 7.12.4
      9          //==============================================================================
     10          
     11          #include "macros.h"
     12          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2
     13          #include "functions.h"
     14          #include <string.h>
     15          
     16          //--------------------------- globals ------------------------------------------

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int CCR0_COUNT = RESET_STATE;
   \                     CCR0_COUNT:
   \   000000                DS8 2
     18          extern unsigned int myTime;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile unsigned int display_count = RESET_STATE;
   \                     display_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          volatile unsigned int one_second_count = RESET_STATE;
   \                     one_second_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          unsigned int one_second_flag = FALSE;
   \                     one_second_flag:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          volatile unsigned int debounce_count_SW1 = RESET_STATE;
   \                     debounce_count_SW1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          volatile unsigned int debounce_count_SW2 = RESET_STATE;
   \                     debounce_count_SW2:
   \   000000                DS8 2
     24          extern unsigned int debounce_flag_SW1;
     25          extern unsigned int debounce_flag_SW2;
     26          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          volatile unsigned int Time_Sequence = RESET_STATE;
   \                     Time_Sequence:
   \   000000                DS8 2
     28          extern volatile unsigned char update_display;
     29          extern volatile unsigned int update_display_count;
     30          extern volatile unsigned int wheel_state;
     31          
     32          extern volatile unsigned char display_changed;
     33          extern char display_line[numLines][strSize];
     34          
     35          extern unsigned int ADC_Left_Detect;
     36          extern unsigned int ADC_Right_Detect;
     37          extern unsigned int ADC_Thumb;
     38          
     39          //------------------------------------------------------------------------------
     40          // CCR0 interrupt 
     41          
     42          #pragma vector = TIMER0_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     43          __interrupt void TIMER0_B0_ISR(void){
   \                     TIMER0_B0_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     44            // timer interrupt B0 handler every 50 ms
     45            CCR0_COUNT++;
   \   000002   9253....     ADD.W   #0x1, &CCR0_COUNT
     46            display_count++;
   \   000006   9253....     ADD.W   #0x1, &display_count
     47            one_second_count++;
   \   00000A   9253....     ADD.W   #0x1, &one_second_count
     48            if(CCR0_COUNT == TB0CCR0_CYCLES){                     // 0.2 seconds passed
   \   00000E   A293....     CMP.W   #0x2, &CCR0_COUNT
   \   000012   1D20         JNE     ??TIMER0_B0_ISR_1
     49              
     50              HEXtoBCD(ADC_Left_Detect);          // convert result to a string
   \   000014   1C42....     MOV.W   &ADC_Left_Detect, R12
   \   000018   ........     CALLA   #HEXtoBCD
     51              ClrDisplay_Buffer_3();
   \   00001C   ........     CALLA   #ClrDisplay_Buffer_3
     52              adc_line4(POSITION_ONE);            // place string in display
   \   000020   0C43         MOV.W   #0x0, R12
   \   000022   ........     CALLA   #adc_line4
     53              
     54              HEXtoBCD(ADC_Right_Detect);         // convert result to a string
   \   000026   1C42....     MOV.W   &ADC_Right_Detect, R12
   \   00002A   ........     CALLA   #HEXtoBCD
     55              ClrDisplay_Buffer_2();
   \   00002E   ........     CALLA   #ClrDisplay_Buffer_2
     56              adc_line3(POSITION_ONE);            // place string in display
   \   000032   0C43         MOV.W   #0x0, R12
   \   000034   ........     CALLA   #adc_line3
     57              
     58              HEXtoBCD(ADC_Thumb);                // convert result to a string
   \   000038   1C42....     MOV.W   &ADC_Thumb, R12
   \   00003C   ........     CALLA   #HEXtoBCD
     59              ClrDisplay_Buffer_1();
   \   000040   ........     CALLA   #ClrDisplay_Buffer_1
     60              adc_line2(POSITION_ONE);            // place string in display
   \   000044   0C43         MOV.W   #0x0, R12
   \   000046   ........     CALLA   #adc_line2
     61              
     62              CCR0_COUNT = RESET_STATE;
   \   00004A   8243....     MOV.W   #0x0, &CCR0_COUNT
     63              }
     64            
     65            if(one_second_count == CCR0_SEC){             // one second has passed
   \                     ??TIMER0_B0_ISR_1:
   \   00004E   B2900A00.... CMP.W   #0xa, &one_second_count
   \   000054   0520         JNE     ??TIMER0_B0_ISR_2
     66              one_second_flag = TRUE;
   \   000056   9243....     MOV.W   #0x1, &one_second_flag
     67              one_second_count = RESET_STATE;
   \   00005A   8243....     MOV.W   #0x0, &one_second_count
   \   00005E   023C         JMP     ??TIMER0_B0_ISR_0
     68            }
     69            else{
     70              one_second_flag = FALSE;
   \                     ??TIMER0_B0_ISR_2:
   \   000060   8243....     MOV.W   #0x0, &one_second_flag
     71            }
     72            
     73            if(display_count > UPDATE_DISPLAY_THRESHOLD){         // 200 ms has passed
   \                     ??TIMER0_B0_ISR_0:
   \   000064   B2900500.... CMP.W   #0x5, &display_count
   \   00006A   0428         JNC     ??TIMER0_B0_ISR_3
     74                update_display = TRUE; // set update display true
   \   00006C   D243....     MOV.B   #0x1, &update_display
     75                display_count = RESET_STATE; //reset count
   \   000070   8243....     MOV.W   #0x0, &display_count
     76              }
     77            TB0CCR0 += TB0CCR0_INTERVAL;
   \                     ??TIMER0_B0_ISR_3:
   \   000074   B25050C39203 ADD.W   #0xc350, &0x392
     78          }
   \   00007A   3C17         POPM.W  #0x4, R15
   \   00007C   0013         RETI
   \   00007E                REQUIRE _A_TB0CCR0_L
     79          
     80          //------------------------- overflow handler TB0 -------------------------------
     81          #pragma vector = TIMER0_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     82          __interrupt void TIMER0_B1_ISR(void){
   \                     TIMER0_B1_ISR:
   \   000000   0F12         PUSH.W  R15
     83            //Timer B0 1-2 overflow interrupt vector (TBIV) handler
     84            
     85            switch(__even_in_range(TB0IV, OVERFLOW)){
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMER0_B1_ISR>_0`:
   \   000008   443C         JMP     ??TIMER0_B1_ISR_1
   \   00000A   063C         JMP     ??TIMER0_B1_ISR_5
   \   00000C   373C         JMP     ??TIMER0_B1_ISR_6
   \   00000E   413C         JMP     ??TIMER0_B1_ISR_1
   \   000010   403C         JMP     ??TIMER0_B1_ISR_1
   \   000012   3F3C         JMP     ??TIMER0_B1_ISR_1
   \   000014   3E3C         JMP     ??TIMER0_B1_ISR_1
   \   000016   3D3C         JMP     ??TIMER0_B1_ISR_1
     86            case NO_INTERRUPT: break; // no interrupt
     87            case CCR1_USED:       // CCR1 not used
     88          //---------------------- debounce timer interrupt --------------------------
     89                if(debounce_flag_SW1){
   \                     ??TIMER0_B1_ISR_5:
   \   000018   8293....     CMP.W   #0x0, &debounce_flag_SW1
   \   00001C   1524         JEQ     ??TIMER0_B1_ISR_2
     90                   debounce_count_SW1++;
   \   00001E   9253....     ADD.W   #0x1, &debounce_count_SW1
     91                   if(debounce_count_SW1 > DEBOUNCE_THRESHOLD){
   \   000022   B2900B00.... CMP.W   #0xb, &debounce_count_SW1
   \   000028   0F28         JNC     ??TIMER0_B1_ISR_2
     92                      P4IE |= SW1;                      // re-enable SW1 interrupt
   \   00002A   E2D33B02     BIS.B   #0x2, &0x23b
     93                      debounce_flag_SW1 = FALSE;        // flag set to false
   \   00002E   8243....     MOV.W   #0x0, &debounce_flag_SW1
     94                      if(!debounce_flag_SW2){
   \   000032   8293....     CMP.W   #0x0, &debounce_flag_SW2
   \   000036   0820         JNE     ??TIMER0_B1_ISR_2
     95                        TB0CCTL0 |= CCIE;               // enable CCR0 interrupt
   \   000038   B2D010008203 BIS.W   #0x10, &0x382
     96                        wheel_state = MOVE_FORWARD;
   \   00003E   9243....     MOV.W   #0x1, &wheel_state
     97                        TB0CCTL1 &= ~CCIE;              // disable debounce timer interrupt
   \   000042   B2C010008403 BIC.W   #0x10, &0x384
     98                      }
     99                   }
    100                  }
    101            //---------------------------- SW2--------------------------------------------- 
    102                if(debounce_flag_SW2){
   \                     ??TIMER0_B1_ISR_2:
   \   000048   8293....     CMP.W   #0x0, &debounce_flag_SW2
   \   00004C   1324         JEQ     ??TIMER0_B1_ISR_3
    103                    debounce_count_SW2++;
   \   00004E   9253....     ADD.W   #0x1, &debounce_count_SW2
    104                    if(debounce_count_SW2 > DEBOUNCE_THRESHOLD){
   \   000052   B2900B00.... CMP.W   #0xb, &debounce_count_SW2
   \   000058   0D28         JNC     ??TIMER0_B1_ISR_3
    105                      P2IE |= SW2;                      // re-enable SW2 interrupt
   \   00005A   F2D21B02     BIS.B   #0x8, &0x21b
    106                      debounce_flag_SW2 = FALSE;        // flag set to false
   \   00005E   8243....     MOV.W   #0x0, &debounce_flag_SW2
    107                      if(!debounce_flag_SW1){
   \   000062   8293....     CMP.W   #0x0, &debounce_flag_SW1
   \   000066   0620         JNE     ??TIMER0_B1_ISR_3
    108                        TB0CCTL0 |= CCIE;               // re-enable CCR0 interrupt
   \   000068   B2D010008203 BIS.W   #0x10, &0x382
    109                        TB0CCTL1 &= ~CCIE;              //disable timer interrupt
   \   00006E   B2C010008403 BIC.W   #0x10, &0x384
    110                      } 
    111                    }
    112                  }
    113                TB0CCR1 += TB0CCR1_INTERVAL; // add offset to TBCCR1
   \                     ??TIMER0_B1_ISR_3:
   \   000074   B25088139403 ADD.W   #0x1388, &0x394
    114              break;
   \   00007A   0B3C         JMP     ??TIMER0_B1_ISR_1
    115            case CCR2_USED:                       // Time_Sequence interrupt CCR2
    116              Time_Sequence++;
   \                     ??TIMER0_B1_ISR_6:
   \   00007C   9253....     ADD.W   #0x1, &Time_Sequence
    117              if(Time_Sequence > TIME_SEQUENCE_CYCLES){
   \   000080   B290FB00.... CMP.W   #0xfb, &Time_Sequence
   \   000086   0228         JNC     ??TIMER0_B1_ISR_4
    118                Time_Sequence = RESET_STATE;
   \   000088   8243....     MOV.W   #0x0, &Time_Sequence
    119              }
    120              TB0CCR2 += TB0CCR2_INTERVAL;
                                ^
Warning[Pe174]: expression has no effect
   \                     ??TIMER0_B1_ISR_4:
   \   00008C   924296039603 MOV.W   &0x396, &0x396
    121              break;  
    122            case OVERFLOW:                     //overflow
    123              //implementation
    124              break;
    125            default: break;
    126            }
    127          }
   \                     ??TIMER0_B1_ISR_1:
   \   000092   3F41         POP.W   R15
   \   000094   0013         RETI
   \   000096                REQUIRE _A_PBIE_L
   \   000096                REQUIRE _A_TB0CCTL0_L
   \   000096                REQUIRE _A_TB0CCTL1_L
   \   000096                REQUIRE _A_PAIE_L
   \   000096                REQUIRE _A_TB0CCR1_L
   \   000096                REQUIRE _A_TB0CCR2_L
   \   000096                REQUIRE _A_TB0IV_L

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??TIMER0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    TIMER0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??TIMER0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    TIMER0_B0_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   TIMER0_B0_ISR
       12   -> ClrDisplay_Buffer_1
       12   -> ClrDisplay_Buffer_2
       12   -> ClrDisplay_Buffer_3
       12   -> HEXtoBCD
       12   -> adc_line2
       12   -> adc_line3
       12   -> adc_line4
      6   TIMER0_B1_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  CCR0_COUNT
     126  TIMER0_B0_ISR
       2  TIMER0_B0_ISR::??INTVEC 86
     150  TIMER0_B1_ISR
       2  TIMER0_B1_ISR::??INTVEC 84
       2  Time_Sequence
       2  _A_PAIE_L
       2  _A_PBIE_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL1_L
       2  _A_TB0IV_L
       2  debounce_count_SW1
       2  debounce_count_SW2
       2  display_count
       2  one_second_count
       2  one_second_flag

 
  16 bytes in segment DATA16_AN
  14 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 276 bytes in segment ISR_CODE
 
 276 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
  14 bytes of DATA  memory (+ 16 bytes shared)

Errors: none
Warnings: 1
