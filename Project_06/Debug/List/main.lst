###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           02/Mar/2020  14:38:43
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\platy\Desktop\ECE-306_Code\Project_06\main.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EW1866.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Project_06\main.c -lC
#        C:\Users\platy\Desktop\ECE-306_Code\Project_06\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Project_06\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_06\Debug\List\main.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_06\Debug\Obj\main.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Project_06\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include "macros.h"
     15          #include <string.h>
     16          
     17          
     18          // Function Prototypes
     19          void main(void);
     20          void Init_Conditions(void);
     21          void Init_LEDs(void);
     22          
     23            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     25          extern char display_line[numLines][strSize];
     26          extern char *display[numLines];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     28          extern volatile unsigned char display_changed;
     29          extern volatile unsigned char update_display;
     30          extern volatile unsigned int update_display_count;
     31          extern volatile unsigned int Time_Sequence;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int prevTime_Sequence = RESET_STATE; 
   \                     prevTime_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          unsigned int myTime = RESET_STATE;
   \                     myTime:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int buttonState = HOLD; //initialize state to be circle
   \                     buttonState:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     35          volatile char one_time = TRUE;
   \                     one_time:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for one_time>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          unsigned int num_presses = RESET_STATE;
   \                     num_presses:
   \   000000                DS8 2
     40          extern unsigned int emitter_flag;

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     41          unsigned int emitter_display_change = TRUE;
   \                     emitter_display_change:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for emitter_display_change>`
     42          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          volatile unsigned int wheel_state = HOLD;
   \                     wheel_state:
   \   000000                DS8 2
     44          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     45          unsigned int black_line_flag = FALSE;
   \                     black_line_flag:
   \   000000                DS8 2
     46          extern unsigned int one_second_flag;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          unsigned int wait_count = RESET_STATE;
   \                     wait_count:
   \   000000                DS8 2
     48          
     49          extern unsigned int ADC_Left_Detect;
     50          extern unsigned int ADC_Right_Detect;
     51          
     52          

   \                                 In  segment CODE, align 2
     53          void main(void){
   \                     main:
     54          //------------------------------------------------------------------------------
     55          // Main Program
     56          // This is the main routine for the program. Execution of code starts here.
     57          // The operating system is Back Ground Fore Ground.
     58          //
     59          //------------------------------------------------------------------------------
     60          // Disable the GPIO power-on default high-impedance mode to activate
     61          // previously configured port settings
     62            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     63            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     64            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     65            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     66            Init_Timers();  // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     67            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     68            Init_Wheels();
   \   000018   ........     CALLA   #Init_Wheels
     69            Init_ADC();
   \   00001C   ........     CALLA   #Init_ADC
     70          // Place the contents of what you want on the display, in between the quotes
     71          // Limited to 10 characters per line
     72          //
     73          
     74            strcpy(display_line[line1], "          ");
   \   000020   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000024   3C40....     MOV.W   #display_line, R12
   \   000028   ........     CALLA   #strcpy
     75            update_string(display_line[line1], line1);
   \   00002C   0D43         MOV.W   #0x0, R13
   \   00002E   ........     CALLA   #update_string
     76            strcpy(display_line[line2], "          ");
   \   000032   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000036   3C40....     MOV.W   #display_line + 11, R12
   \   00003A   ........     CALLA   #strcpy
     77            update_string(display_line[line2], line2);
   \   00003E   1D43         MOV.W   #0x1, R13
   \   000040   3C40....     MOV.W   #display_line + 11, R12
   \   000044   ........     CALLA   #update_string
     78            strcpy(display_line[line3], "          ");
   \   000048   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00004C   3C40....     MOV.W   #display_line + 22, R12
   \   000050   ........     CALLA   #strcpy
     79            update_string(display_line[line3], line3);
   \   000054   2D43         MOV.W   #0x2, R13
   \   000056   3C40....     MOV.W   #display_line + 22, R12
   \   00005A   ........     CALLA   #update_string
     80            strcpy(display_line[line4], "          ");
   \   00005E   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000062   3C40....     MOV.W   #display_line + 33, R12
   \   000066   ........     CALLA   #strcpy
     81            update_string(display_line[line4], line4);
   \   00006A   3D400300     MOV.W   #0x3, R13
   \   00006E   3C40....     MOV.W   #display_line + 33, R12
   \   000072   ........     CALLA   #update_string
     82            enable_display_update();
   \   000076   ........     CALLA   #enable_display_update
     83            display_changed = TRUE;
   \   00007A   D243....     MOV.B   #0x1, &display_changed
     84          
     85          
     86          //------------------------------------------------------------------------------
     87          // Begining of the "While" Operating System
     88          //------------------------------------------------------------------------------
     89          while(ALWAYS){  // Can the Operating system run
     90                // Check for switch state change
     91              switch(wheel_state){
   \                     ??main_0:
   \   00007E   1F42....     MOV.W   &wheel_state, R15
   \   000082   0F83         SUB.W   #0x0, R15
   \   000084   0524         JEQ     ??main_5
   \   000086   1F83         SUB.W   #0x1, R15
   \   000088   1824         JEQ     ??main_6
   \   00008A   1F83         SUB.W   #0x1, R15
   \   00008C   3024         JEQ     ??main_7
   \   00008E   3B3C         JMP     ??main_4
     92              case HOLD:
     93                stop_Movement();
   \                     ??main_5:
   \   000090   ........     CALLA   #stop_Movement
     94                if(black_line_flag){
   \   000094   8293....     CMP.W   #0x0, &black_line_flag
   \   000098   3624         JEQ     ??main_4
     95                  if(one_second_flag){
   \   00009A   8293....     CMP.W   #0x0, &one_second_flag
   \   00009E   0224         JEQ     ??main_8
     96                    wait_count++;
   \   0000A0   9253....     ADD.W   #0x1, &wait_count
     97                  }
     98                  if(wait_count == WAIT_SECONDS){
   \                     ??main_8:
   \   0000A4   B2900A00.... CMP.W   #0xa, &wait_count
   \   0000AA   2D20         JNE     ??main_4
     99                    black_line_flag = FALSE;
   \   0000AC   8243....     MOV.W   #0x0, &black_line_flag
    100                    wait_count = RESET_STATE;
   \   0000B0   8243....     MOV.W   #0x0, &wait_count
    101                    wheel_state = TURN_AROUND;
   \   0000B4   A243....     MOV.W   #0x2, &wheel_state
    102                  }
    103                }
    104                break;
   \   0000B8   263C         JMP     ??main_4
    105              case MOVE_FORWARD:
    106                if(one_second_flag){
   \                     ??main_6:
   \   0000BA   8293....     CMP.W   #0x0, &one_second_flag
   \   0000BE   0224         JEQ     ??main_9
    107                  wait_count++;
   \   0000C0   9253....     ADD.W   #0x1, &wait_count
    108                }
    109                if(wait_count > WAIT_SECONDS){
   \                     ??main_9:
   \   0000C4   B2900B00.... CMP.W   #0xb, &wait_count
   \   0000CA   0228         JNC     ??main_10
    110                move_Forward();
   \   0000CC   ........     CALLA   #move_Forward
    111                }
    112                if(ADC_Left_Detect > BLACK_THRESHOLD || ADC_Right_Detect > BLACK_THRESHOLD){
   \                     ??main_10:
   \   0000D0   B2902D01.... CMP.W   #0x12d, &ADC_Left_Detect
   \   0000D6   042C         JC      ??main_11
   \   0000D8   B2902D01.... CMP.W   #0x12d, &ADC_Right_Detect
   \   0000DE   1328         JNC     ??main_4
    113                  wheel_state = HOLD;
   \                     ??main_11:
   \   0000E0   8243....     MOV.W   #0x0, &wheel_state
    114                  black_line_flag = TRUE;
   \   0000E4   9243....     MOV.W   #0x1, &black_line_flag
    115                  wait_count = RESET_STATE;
   \   0000E8   8243....     MOV.W   #0x0, &wait_count
    116                }
    117                break;
   \   0000EC   0C3C         JMP     ??main_4
    118              case TURN_AROUND: 
    119                spin_CW();
   \                     ??main_7:
   \   0000EE   ........     CALLA   #spin_CW
    120                if(ADC_Right_Detect > BLACK_THRESHOLD && ADC_Left_Detect > BLACK_THRESHOLD){
   \   0000F2   B2902D01.... CMP.W   #0x12d, &ADC_Right_Detect
   \   0000F8   0628         JNC     ??main_4
   \   0000FA   B2902D01.... CMP.W   #0x12d, &ADC_Left_Detect
   \   000100   0228         JNC     ??main_4
    121                  wheel_state = HOLD;
   \   000102   8243....     MOV.W   #0x0, &wheel_state
    122                }
    123                break;   
    124              default: break;
    125              }
    126              
    127              Display_Process(); 
   \                     ??main_4:
   \   000106   ........     CALLA   #Display_Process
    128              //clock_process(); // update myTime
    129              Switches_Process(); //check switches
   \   00010A   ........     CALLA   #Switches_Process
   \   00010E   B73F         JMP     ??main_0
   \   000110   0343         NOP
   \   000112                REQUIRE _A_PM5CTL0_L
    130            }
    131          
    132          //------------------------------------------------------------------------------
    133          }
    134          

   \                                 In  segment CODE, align 2
    135          void clear_LCD(void){
   \                     clear_LCD:
    136            strcpy(display_line[line1], "          ");
   \   000000   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000004   3C40....     MOV.W   #display_line, R12
   \   000008   ........     CALLA   #strcpy
    137            update_string(display_line[line1], line1);
   \   00000C   0D43         MOV.W   #0x0, R13
   \   00000E   ........     CALLA   #update_string
    138            strcpy(display_line[line2], "          ");
   \   000012   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000016   3C40....     MOV.W   #display_line + 11, R12
   \   00001A   ........     CALLA   #strcpy
    139            update_string(display_line[line2], line2);
   \   00001E   1D43         MOV.W   #0x1, R13
   \   000020   3C40....     MOV.W   #display_line + 11, R12
   \   000024   ........     CALLA   #update_string
    140            strcpy(display_line[line3], "          ");
   \   000028   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00002C   3C40....     MOV.W   #display_line + 22, R12
   \   000030   ........     CALLA   #strcpy
    141            update_string(display_line[line3], line3);
   \   000034   2D43         MOV.W   #0x2, R13
   \   000036   3C40....     MOV.W   #display_line + 22, R12
   \   00003A   ........     CALLA   #update_string
    142            strcpy(display_line[line4], "          ");
   \   00003E   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000042   3C40....     MOV.W   #display_line + 33, R12
   \   000046   ........     CALLA   #strcpy
    143            update_string(display_line[line4], line4);
   \   00004A   3D400300     MOV.W   #0x3, R13
   \   00004E   3C40....     MOV.W   #display_line + 33, R12
   \   000052   ........     CALLA   #update_string
    144            enable_display_update();
   \   000056   ........     CALLA   #enable_display_update
    145            display_changed = TRUE;
   \   00005A   D243....     MOV.B   #0x1, &display_changed
    146          }
   \   00005E   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for one_time>`:
   \   000000   01           DC8 1

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for emitter_display_change>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  
    147            
    148          
    149          
    150          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   clear_LCD
        4   -> enable_display_update
        4   -> strcpy
        4   -> update_string
      4   main
        4   -> Display_Process
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Init_Wheels
        4   -> Switches_Process
        4   -> enable_display_update
        4   -> move_Forward
        4   -> spin_CW
        4   -> stop_Movement
        4   -> strcpy
        4   -> update_string


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  ?<Initializer for emitter_display_change>
       1  ?<Initializer for one_time>
       2  _A_PM5CTL0_L
       2  black_line_flag
       2  buttonState
       1  change
       1  chosen_direction
      96  clear_LCD
       1  display_mode
       2  emitter_display_change
     274  main
       2  myTime
       2  num_presses
       1  one_time
       2  prevTime_Sequence
       1  slow_input_down
       2  test_value
       2  wait_count
       2  wheel_state

 
 370 bytes in segment CODE
   2 bytes in segment DATA16_AN
  11 bytes in segment DATA16_C
   3 bytes in segment DATA16_I
   3 bytes in segment DATA16_ID
  20 bytes in segment DATA16_Z
 
 370 bytes of CODE  memory
  14 bytes of CONST memory
  23 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
