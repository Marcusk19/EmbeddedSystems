###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           31/Jan/2020  12:40:26
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\platy\Desktop\ECE-306_Code\Homework_03\init.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EWF3C8.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Homework_03\init.c -lC
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_03\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_03\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_03\Debug\List\init.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework_03\Debug\Obj\init.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Homework_03\init.c
      1          //==============================================================================
      2          // Filename : init.c
      3          // Description: This file contains the initializing function declarations
      4          // 
      5          // Author: Marcus Kok
      6          // Date: January 2020
      7          // Compiler: Made with IAR Embedded Workbench for MSP430 7.12.4
      8          //==============================================================================
      9          
     10          #include "macros.h"
     11          #include "msp430.h"
     12          
     13          extern volatile unsigned char update_display;
     14          extern volatile unsigned int update_display_count;
     15          extern char display_line[numLines][strSize];
     16          extern char *display[numLines];
     17          

   \                                 In  segment CODE, align 2
     18          void enable_interrupts(void){
   \                     enable_interrupts:
     19            __bis_SR_register(GIE);     // enable interrupts
   \   000000   0343         NOP
   \   000002   32D2         BIS.W   #0x8, SR
     20            asm volatile ("eint \n");
   \   000004   32D2         eint 
     21          }
   \   000006   1001         RETA
     22          

   \                                 In  segment CODE, align 2
     23          void Init_Conditions(void){
   \                     Init_Conditions:
     24          //------------------------------------------------------------------------------
     25            int i;
     26          
     27            for(i=start;i<loopEnd;i++){
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??Init_Conditions_0:
   \   000002   3F900B00     CMP.W   #0xb, R15
   \   000006   0A34         JGE     ??Init_Conditions_1
     28              display_line[line1][i] = RESET_STATE;
   \   000008   CF43....     MOV.B   #0x0, display_line(R15)
     29              display_line[line2][i] = RESET_STATE;
   \   00000C   CF43....     MOV.B   #0x0, display_line + 11(R15)
     30              display_line[line3][i] = RESET_STATE;
   \   000010   CF43....     MOV.B   #0x0, display_line + 22(R15)
     31              display_line[line4][i] = RESET_STATE;
   \   000014   CF43....     MOV.B   #0x0, display_line + 33(R15)
     32            }
   \   000018   1F53         ADD.W   #0x1, R15
   \   00001A   F33F         JMP     ??Init_Conditions_0
     33            display_line[line1][charlength] = RESET_STATE;
   \                     ??Init_Conditions_1:
   \   00001C   C243....     MOV.B   #0x0, &display_line + 10
     34            display_line[line2][charlength] = RESET_STATE;
   \   000020   C243....     MOV.B   #0x0, &display_line + 21
     35            display_line[line3][charlength] = RESET_STATE;
   \   000024   C243....     MOV.B   #0x0, &display_line + 32
     36            display_line[line4][charlength] = RESET_STATE;
   \   000028   C243....     MOV.B   #0x0, &display_line + 43
     37          
     38            display[line1] = &display_line[line1][RESET_STATE];
   \   00002C   B240........ MOV.W   #display_line, &display
     39            display[line2] = &display_line[line2][RESET_STATE];
   \   000032   B240........ MOV.W   #display_line + 11, &display + 2
     40            display[line3] = &display_line[line3][RESET_STATE];
   \   000038   B240........ MOV.W   #display_line + 22, &display + 4
     41            display[line4] = &display_line[line4][RESET_STATE];
   \   00003E   B240........ MOV.W   #display_line + 33, &display + 6
     42            update_display = RESET_STATE;
   \   000044   C243....     MOV.B   #0x0, &update_display
     43            update_display_count = RESET_STATE;
   \   000048   8243....     MOV.W   #0x0, &update_display_count
     44          // Interrupts are disabled by default, enable them.
     45            enable_interrupts();
   \   00004C   ........     BRA     #enable_interrupts
     46          //------------------------------------------------------------------------------
     47          }
     48          
     49            

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Conditions
        0   -> enable_interrupts
      4   enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      80  Init_Conditions
       8  enable_interrupts

 
 88 bytes in segment CODE
 
 88 bytes of CODE memory

Errors: none
Warnings: none
