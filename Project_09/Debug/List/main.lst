###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           16/Apr/2020  11:08:59
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\platy\Desktop\ECE-306_Code\Project_09\main.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EW2F6.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Project_09\main.c -lC
#        C:\Users\platy\Desktop\ECE-306_Code\Project_09\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Project_09\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_09\Debug\List\main.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Project_09\Debug\Obj\main.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Project_09\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include "macros.h"
     15          #include <string.h>
     16          
     17          
     18          // Function Prototypes
     19          void main(void);
     20          void Init_Conditions(void);
     21          void Init_LEDs(void);
     22          
     23            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     25          extern char display_line[numLines][strSize];
     26          extern char *display[numLines];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     28          extern volatile unsigned char display_changed;
     29          extern volatile unsigned char update_display;
     30          extern volatile unsigned int update_display_count;
     31          extern volatile unsigned int Time_Sequence;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int prevTime_Sequence = RESET_STATE; 
   \                     prevTime_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          unsigned int myTime = RESET_STATE;
   \                     myTime:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int buttonState = HOLD; 
   \                     buttonState:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     35          volatile char one_time = TRUE;
   \                     one_time:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for one_time>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     39          unsigned int emitter_display_change = TRUE;
   \                     emitter_display_change:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for emitter_display_change>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     40          unsigned int IOT_start = TRUE;
   \                     IOT_start:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for IOT_start>`
     41          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          volatile unsigned int wheel_state = HOLD;
   \                     wheel_state:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     43          volatile unsigned int main_state = HOLD;
   \                     main_state:
   \   000000                DS8 2
     44          extern volatile unsigned int next_state;
     45          extern int display_state;
     46          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     47          unsigned int black_line_flag = FALSE;
   \                     black_line_flag:
   \   000000                DS8 2
     48          extern unsigned int one_second_flag;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          unsigned int main_wait_count = RESET_STATE;
   \                     main_wait_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     50          unsigned int wait_count = RESET_STATE;
   \                     wait_count:
   \   000000                DS8 2
     51          
     52          extern unsigned int ADC_Left_Detect;
     53          extern unsigned int ADC_Right_Detect;
     54          
     55          extern unsigned int usb_rx_ring_rd;
     56          extern volatile unsigned int usb_rx_ring_wr;
     57          extern volatile char USB_Char_Rx[SMALL_RING_SIZE];
     58          extern int UCA0_index;
     59          extern int UCA1_index;
     60          extern char receive_char[MAX_STR_SIZE];
     61          extern char transmit_char[MAX_STR_SIZE];
     62          
     63          extern unsigned int Button_One;
     64          extern unsigned int Button_Two;
     65          
     66          extern volatile unsigned int IOT_enable_count;
     67          extern volatile char command_ready;
     68          extern unsigned int FRAM_Command;
     69          extern volatile unsigned int one_second_count;
     70          extern char current_IOT_char;
     71          extern int new_IOT_char;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     72          int Profile_Start = FALSE;
   \                     Profile_Start:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     73          int LED_blink = FALSE;
   \                     LED_blink:
   \   000000                DS8 2
     74          //------------------------------------------------------------------------------

   \                                 In  segment CODE, align 2
     75          void main(void){
   \                     main:
     76          //------------------------------------------------------------------------------
     77          // Main Program
     78          // This is the main routine for the program. Execution of code starts here.
     79          // The operating system is Back Ground Fore Ground.
     80          //
     81          //------------------------------------------------------------------------------
     82          // Disable the GPIO power-on default high-impedance mode to activate
     83          // previously configured port settings
     84            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     85            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     86            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     87            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     88            Init_Timers();                        // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     89            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     90            Init_Wheels();
   \   000018   ........     CALLA   #Init_Wheels
     91            //Init_ADC();
     92            Init_Serial_UCA0();                   // Initialize Serial communication
   \   00001C   ........     CALLA   #Init_Serial_UCA0
     93            Init_Serial_UCA1();
   \   000020   ........     CALLA   #Init_Serial_UCA1
     94            Init_Chars();                         // Initialize char display on screen
   \   000024   ........     CALLA   #Init_Chars
     95            
     96          // Place the contents of what you want on the display, in between the quotes
     97          // Limited to 10 characters per line
     98          //
     99          
    100          
    101            UCA0_index = BEGINNING;
   \   000028   8243....     MOV.W   #0x0, &UCA0_index
    102            UCA1_index = BEGINNING;
   \   00002C   8243....     MOV.W   #0x0, &UCA1_index
    103          
    104          //------------------------------------------------------------------------------
    105          // Begining of the "While" Operating System
    106          //------------------------------------------------------------------------------
    107            while(ALWAYS){  // Can the Operating system run
    108              
    109              if(IOT_start){              // Only do this on start up 
   \                     ??main_0:
   \   000030   8293....     CMP.W   #0x0, &IOT_start
   \   000034   0D24         JEQ     ??main_6
    110                if(IOT_enable_count > IOT_WAIT_TIME){
   \   000036   B2901F00.... CMP.W   #0x1f, &IOT_enable_count
   \   00003C   0928         JNC     ??main_6
    111                  IOT_enable_count = RESET_STATE;
   \   00003E   8243....     MOV.W   #0x0, &IOT_enable_count
    112                  P5OUT |= IOT_RESET;     // set IOT_RESET inactive (high)
   \   000042   D2D34202     BIS.B   #0x1, &0x242
    113                  main_state = START;
   \   000046   B2400700.... MOV.W   #0x7, &main_state
    114                  IOT_start = FALSE;
   \   00004C   8243....     MOV.W   #0x0, &IOT_start
    115                }
    116              }
    117              
    118          
    119              
    120              switch(main_state){
   \                     ??main_6:
   \   000050   1F42....     MOV.W   &main_state, R15
   \   000054   0F83         SUB.W   #0x0, R15
   \   000056   4024         JEQ     ??main_4
   \   000058   1F83         SUB.W   #0x1, R15
   \   00005A   1324         JEQ     ??main_7
   \   00005C   1F83         SUB.W   #0x1, R15
   \   00005E   1424         JEQ     ??main_8
   \   000060   1F83         SUB.W   #0x1, R15
   \   000062   1524         JEQ     ??main_9
   \   000064   2F82         SUB.W   #0x4, R15
   \   000066   0424         JEQ     ??main_10
   \   000068   3F800300     SUB.W   #0x3, R15
   \   00006C   1724         JEQ     ??main_11
   \   00006E   343C         JMP     ??main_4
    121              case HOLD:
    122              break;
    123              case START:
    124                  if(current_IOT_char == '2'){
   \                     ??main_10:
   \   000070   F2903200.... CMP.B   #0x32, &current_IOT_char
   \   000076   3020         JNE     ??main_4
    125                      main_state = GET_IP;
   \   000078   9243....     MOV.W   #0x1, &main_state
    126                      new_IOT_char = FALSE;
   \   00007C   8243....     MOV.W   #0x0, &new_IOT_char
    127                  }
    128                break;
   \   000080   2B3C         JMP     ??main_4
    129              case GET_IP:
    130                get_ip();
   \                     ??main_7:
   \   000082   ........     CALLA   #get_ip
    131                break;
   \   000086   283C         JMP     ??main_4
    132              case PROCESS_IP:
    133                process_ip();
   \                     ??main_8:
   \   000088   ........     CALLA   #process_ip
    134                break;
   \   00008C   253C         JMP     ??main_4
    135              case DISPLAY_IP:
    136                display_ip();
   \                     ??main_9:
   \   00008E   ........     CALLA   #display_ip
    137                Profile_Start = TRUE;
   \   000092   9243....     MOV.W   #0x1, &Profile_Start
    138                main_state = HOLD;
   \   000096   8243....     MOV.W   #0x0, &main_state
    139                break;
   \   00009A   1E3C         JMP     ??main_4
    140              case PING:
    141              if(one_second_count >= ONE_SECOND){                 // ping google.com every second
   \                     ??main_11:
   \   00009C   B2901400.... CMP.W   #0x14, &one_second_count
   \   0000A2   1A28         JNC     ??main_4
    142                LED_blink = !LED_blink;
   \   0000A4   8293....     CMP.W   #0x0, &LED_blink
   \   0000A8   0320         JNE     ??main_12
   \   0000AA   9243....     MOV.W   #0x1, &LED_blink
   \   0000AE   023C         JMP     ??main_5
   \                     ??main_12:
   \   0000B0   8243....     MOV.W   #0x0, &LED_blink
    143                one_second_count = RESET_STATE;
   \                     ??main_5:
   \   0000B4   8243....     MOV.W   #0x0, &one_second_count
    144                send_command("AT+DNSLOOKUP=www.google.com\r\n");
   \   0000B8   3C40....     MOV.W   #`?<Constant "AT+DNSLOOKUP=www.goog...">`, R12
   \   0000BC   ........     CALLA   #send_command
    145                if(LED_blink)
   \   0000C0   8293....     CMP.W   #0x0, &LED_blink
   \   0000C4   0524         JEQ     ??main_13
    146                  send_command("AT+DGPIO=30,1");
   \   0000C6   3C40....     MOV.W   #`?<Constant "AT+DGPIO=30,1">`, R12
   \   0000CA   ........     CALLA   #send_command
   \   0000CE   043C         JMP     ??main_4
    147                else
    148                  send_command("AT+DGPIO=30,0");
   \                     ??main_13:
   \   0000D0   3C40....     MOV.W   #`?<Constant "AT+DGPIO=30,0">`, R12
   \   0000D4   ........     CALLA   #send_command
    149              }
    150                break;
    151                
    152              default: break;
    153              }
    154              
    155              if(Profile_Start){                          // if flag is set send command
   \                     ??main_4:
   \   0000D8   8293....     CMP.W   #0x0, &Profile_Start
   \   0000DC   0624         JEQ     ??main_14
    156                send_command("AT+NSTCP=50000,2\r");
   \   0000DE   3C40....     MOV.W   #`?<Constant "AT+NSTCP=50000,2\\r">`, R12
   \   0000E2   ........     CALLA   #send_command
    157                Profile_Start = FALSE;
   \   0000E6   8243....     MOV.W   #0x0, &Profile_Start
    158              }
    159              
    160              Display_Process();
   \                     ??main_14:
   \   0000EA   ........     CALLA   #Display_Process
    161              wait_for_command();
   \   0000EE   ........     CALLA   #wait_for_command
    162              wheel_control();
   \   0000F2   ........     CALLA   #wheel_control
   \   0000F6   9C3F         JMP     ??main_0
   \   0000F8   0343         NOP
   \   0000FA                REQUIRE _A_PM5CTL0_L
   \   0000FA                REQUIRE _A_PCOUT_L
    163              //Serial_Display_Process();
    164              //clock_process(); // update myTime
    165              //Switches_Process(); //check switches
    166            }
    167          
    168          //------------------------------------------------------------------------------
    169          }

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for one_time>`:
   \   000000   01           DC8 1

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for emitter_display_change>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for IOT_start>`:
   \   000000   0100         DC16 1

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+DNSLOOKUP=www.goog...">`:
   \   000000   41542B444E53 DC8 "AT+DNSLOOKUP=www.google.com\015\012"
   \            4C4F4F4B5550
   \            3D7777772E67
   \            6F6F676C652E
   \            636F6D0D0A00

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+DGPIO=30,1">`:
   \   000000   41542B444750 DC8 "AT+DGPIO=30,1"
   \            494F3D33302C
   \            3100        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+DGPIO=30,0">`:
   \   000000   41542B444750 DC8 "AT+DGPIO=30,0"
   \            494F3D33302C
   \            3000        

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+NSTCP=50000,2\\r">`:
   \   000000   41542B4E5354 DC8 "AT+NSTCP=50000,2\015"
   \            43503D353030
   \            30302C320D00
    170            

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Init_Chars
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Serial_UCA0
        4   -> Init_Serial_UCA1
        4   -> Init_Timers
        4   -> Init_Wheels
        4   -> display_ip
        4   -> get_ip
        4   -> process_ip
        4   -> send_command
        4   -> wait_for_command
        4   -> wheel_control


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "AT+DGPIO=30,0">
      14  ?<Constant "AT+DGPIO=30,1">
      30  ?<Constant "AT+DNSLOOKUP=www.goog...">
      18  ?<Constant "AT+NSTCP=50000,2\r">
       2  ?<Initializer for IOT_start>
       2  ?<Initializer for emitter_display_change>
       1  ?<Initializer for one_time>
       2  IOT_start
       2  LED_blink
       2  Profile_Start
       2  _A_PCOUT_L
       2  _A_PM5CTL0_L
       2  black_line_flag
       2  buttonState
       1  change
       1  chosen_direction
       1  display_mode
       2  emitter_display_change
     250  main
       2  main_state
       2  main_wait_count
       2  myTime
       1  one_time
       2  prevTime_Sequence
       1  slow_input_down
       2  test_value
       2  wait_count
       2  wheel_state

 
 250 bytes in segment CODE
   4 bytes in segment DATA16_AN
  76 bytes in segment DATA16_C
   5 bytes in segment DATA16_I
   5 bytes in segment DATA16_ID
  26 bytes in segment DATA16_Z
 
 250 bytes of CODE  memory
  81 bytes of CONST memory
  31 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
