###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           14/Jan/2020  20:33:32
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  C:\Users\platy\Desktop\ECE-306_Code\Homework1\main.c
#    Command line  =  
#        -f C:\Users\platy\AppData\Local\Temp\EWB1A9.tmp
#        (C:\Users\platy\Desktop\ECE-306_Code\Homework1\main.c -lC
#        C:\Users\platy\Desktop\ECE-306_Code\Homework1\Debug\List -o
#        C:\Users\platy\Desktop\ECE-306_Code\Homework1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR2355__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h" -I
#        ./\ --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework1\Debug\List\main.lst
#    Object file   =  
#        C:\Users\platy\Desktop\ECE-306_Code\Homework1\Debug\Obj\main.r43
#
###############################################################################

C:\Users\platy\Desktop\ECE-306_Code\Homework1\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     14          #include <string.h>
     15          
     16          #define ALWAYS                  (1)
     17          #define RESET_STATE             (0)
     18          #define RED_LED              (0x01) // RED LED 0
     19          #define GRN_LED              (0x40) // GREEN LED 1
     20          
     21          // Function Prototypes
     22          void main(void);
     23          void Init_Conditions(void);
     24          void Init_LEDs(void);
     25          
     26            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     28          extern char display_line[4][11];
     29          extern char *display[4];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     31          extern volatile unsigned char display_changed;
     32          extern volatile unsigned char update_display;
     33          extern volatile unsigned int update_display_count;
     34          extern volatile unsigned int Time_Sequence;
     35          extern volatile char one_time;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          char change;
   \                     change:
   \   000000                DS8 1
     39          

   \                                 In  segment CODE, align 2
     40          void main(void){
   \                     main:
     41          //------------------------------------------------------------------------------
     42          // Main Program
     43          // This is the main routine for the program. Execution of code starts here.
     44          // The operating system is Back Ground Fore Ground.
     45          //
     46          //------------------------------------------------------------------------------
     47          // Disable the GPIO power-on default high-impedance mode to activate
     48          // previously configured port settings
     49            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     50            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     51            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     52            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     53            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     54            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     55          // Place the contents of what you want on the display, in between the quotes
     56          // Limited to 10 characters per line
     57          //
     58          
     59            strcpy(display_line[0], "   NCSU   ");
   \   000018   3D40....     MOV.W   #`?<Constant "   NCSU   ">`, R13
   \   00001C   3C40....     MOV.W   #display_line, R12
   \   000020   ........     CALLA   #strcpy
     60            update_string(display_line[0], 0);
   \   000024   0D43         MOV.W   #0x0, R13
   \   000026   ........     CALLA   #update_string
     61            strcpy(display_line[1], "  ECE306  ");
   \   00002A   3D40....     MOV.W   #`?<Constant "  ECE306  ">`, R13
   \   00002E   3C40....     MOV.W   #display_line + 11, R12
   \   000032   ........     CALLA   #strcpy
     62            update_string(display_line[1], 1);
   \   000036   1D43         MOV.W   #0x1, R13
   \   000038   3C40....     MOV.W   #display_line + 11, R12
   \   00003C   ........     CALLA   #update_string
     63            strcpy(display_line[2], "    LR    ");
   \   000040   3D40....     MOV.W   #`?<Constant "    LR    ">`, R13
   \   000044   3C40....     MOV.W   #display_line + 22, R12
   \   000048   ........     CALLA   #strcpy
     64            update_string(display_line[2], 2);
   \   00004C   2D43         MOV.W   #0x2, R13
   \   00004E   3C40....     MOV.W   #display_line + 22, R12
   \   000052   ........     CALLA   #update_string
     65            strcpy(display_line[3], "    BC    ");
   \   000056   3D40....     MOV.W   #`?<Constant "    BC    ">`, R13
   \   00005A   3C40....     MOV.W   #display_line + 33, R12
   \   00005E   ........     CALLA   #strcpy
     66            update_string(display_line[3], 3);
   \   000062   3D400300     MOV.W   #0x3, R13
   \   000066   3C40....     MOV.W   #display_line + 33, R12
   \   00006A   ........     CALLA   #update_string
     67            enable_display_update();
   \   00006E   ........     CALLA   #enable_display_update
     68          
     69          //------------------------------------------------------------------------------
     70          // Begining of the "While" Operating System
     71          //------------------------------------------------------------------------------
     72            while(ALWAYS) {                      // Can the Operating system run
     73              switch(Time_Sequence){
   \                     ??main_0:
   \   000072   1F42....     MOV.W   &Time_Sequence, R15
   \   000076   3F803200     SUB.W   #0x32, R15
   \   00007A   3724         JEQ     ??main_7
   \   00007C   3F803200     SUB.W   #0x32, R15
   \   000080   2924         JEQ     ??main_8
   \   000082   3F803200     SUB.W   #0x32, R15
   \   000086   1B24         JEQ     ??main_9
   \   000088   3F803200     SUB.W   #0x32, R15
   \   00008C   0F24         JEQ     ??main_10
   \   00008E   3F803200     SUB.W   #0x32, R15
   \   000092   3520         JNE     ??main_6
     74                case 250:                        //
     75                  if(one_time){
   \   000094   C293....     CMP.B   #0x0, &one_time
   \   000098   0624         JEQ     ??main_11
     76                    Init_LEDs();
   \   00009A   ........     CALLA   #Init_LEDs
     77                    display_changed = 1;
   \   00009E   D243....     MOV.B   #0x1, &display_changed
     78                    one_time = 0;
   \   0000A2   C243....     MOV.B   #0x0, &one_time
     79                  }
     80                  Time_Sequence = 0;             //
   \                     ??main_11:
   \   0000A6   8243....     MOV.W   #0x0, &Time_Sequence
     81                  break;
   \   0000AA   293C         JMP     ??main_6
     82                case 200:                        //
     83                  if(one_time){
   \                     ??main_10:
   \   0000AC   C293....     CMP.B   #0x0, &one_time
   \   0000B0   2624         JEQ     ??main_6
     84                    P6OUT |= GRN_LED;            // Change State of LED 5
   \   0000B2   F2D040004302 BIS.B   #0x40, &0x243
     85                    one_time = 0;
   \   0000B8   C243....     MOV.B   #0x0, &one_time
     86                  }
     87                  break;
   \   0000BC   203C         JMP     ??main_6
     88                case 150:                         //
     89                  if(one_time){
   \                     ??main_9:
   \   0000BE   C293....     CMP.B   #0x0, &one_time
   \   0000C2   1D24         JEQ     ??main_6
     90                    P1OUT |= RED_LED;            // Change State of LED 4
   \   0000C4   D2D30202     BIS.B   #0x1, &0x202
     91                    P6OUT &= ~GRN_LED;           // Change State of LED 5
   \   0000C8   F2C040004302 BIC.B   #0x40, &0x243
     92                    one_time = 0;
   \   0000CE   C243....     MOV.B   #0x0, &one_time
     93                  }
     94                  break;
   \   0000D2   153C         JMP     ??main_6
     95                case 100:                         //
     96                  if(one_time){
   \                     ??main_8:
   \   0000D4   C293....     CMP.B   #0x0, &one_time
   \   0000D8   1224         JEQ     ??main_6
     97                    P6OUT |= GRN_LED;            // Change State of LED 5
   \   0000DA   F2D040004302 BIS.B   #0x40, &0x243
     98                    display_changed = 1;
   \   0000E0   D243....     MOV.B   #0x1, &display_changed
     99                    one_time = 0;
   \   0000E4   C243....     MOV.B   #0x0, &one_time
    100                  }
    101                  break;
   \   0000E8   0A3C         JMP     ??main_6
    102                case  50:                        //
    103                  if(one_time){
   \                     ??main_7:
   \   0000EA   C293....     CMP.B   #0x0, &one_time
   \   0000EE   0724         JEQ     ??main_6
    104                    P1OUT &= ~RED_LED;           // Change State of LED 4
   \   0000F0   D2C30202     BIC.B   #0x1, &0x202
    105                    P6OUT &= ~GRN_LED;           // Change State of LED 5
   \   0000F4   F2C040004302 BIC.B   #0x40, &0x243
    106                    one_time = 0;
   \   0000FA   C243....     MOV.B   #0x0, &one_time
    107                  }
    108                  break;                         //
    109                default: break;
    110              }
    111              Switches_Process();                // Check for switch state change
   \                     ??main_6:
   \   0000FE   ........     CALLA   #Switches_Process
    112              Display_Process();
   \   000102   ........     CALLA   #Display_Process
   \   000106   B53F         JMP     ??main_0
   \   000108   0343         NOP
   \   00010A                REQUIRE _A_PM5CTL0_L
   \   00010A                REQUIRE _A_PCOUT_L
   \   00010A                REQUIRE _A_PAOUT_L
    113            }
    114          //------------------------------------------------------------------------------
    115          }
    116          

   \                                 In  segment CODE, align 2
    117          void Init_Conditions(void){
   \                     Init_Conditions:
   \   000000   0A12         PUSH.W  R10
    118          //------------------------------------------------------------------------------
    119            int i;
    120          
    121            for(i=0;i<11;i++){
   \   000002   0A43         MOV.W   #0x0, R10
   \                     ??Init_Conditions_0:
   \   000004   3A900B00     CMP.W   #0xb, R10
   \   000008   0A34         JGE     ??Init_Conditions_1
    122              display_line[0][i] = RESET_STATE;
   \   00000A   CA43....     MOV.B   #0x0, display_line(R10)
    123              display_line[1][i] = RESET_STATE;
   \   00000E   CA43....     MOV.B   #0x0, display_line + 11(R10)
    124              display_line[2][i] = RESET_STATE;
   \   000012   CA43....     MOV.B   #0x0, display_line + 22(R10)
    125              display_line[3][i] = RESET_STATE;
   \   000016   CA43....     MOV.B   #0x0, display_line + 33(R10)
    126            }
   \   00001A   1A53         ADD.W   #0x1, R10
   \   00001C   F33F         JMP     ??Init_Conditions_0
    127            display_line[0][10] = 0;
   \                     ??Init_Conditions_1:
   \   00001E   C243....     MOV.B   #0x0, &display_line + 10
    128            display_line[1][10] = 0;
   \   000022   C243....     MOV.B   #0x0, &display_line + 21
    129            display_line[2][10] = 0;
   \   000026   C243....     MOV.B   #0x0, &display_line + 32
    130            display_line[3][10] = 0;
   \   00002A   C243....     MOV.B   #0x0, &display_line + 43
    131          
    132            display[0] = &display_line[0][0];
   \   00002E   B240........ MOV.W   #display_line, &display
    133            display[1] = &display_line[1][0];
   \   000034   B240........ MOV.W   #display_line + 11, &display + 2
    134            display[2] = &display_line[2][0];
   \   00003A   B240........ MOV.W   #display_line + 22, &display + 4
    135            display[3] = &display_line[3][0];
   \   000040   B240........ MOV.W   #display_line + 33, &display + 6
    136            update_display = 0;
   \   000046   C243....     MOV.B   #0x0, &update_display
    137            update_display_count = 0;
   \   00004A   8243....     MOV.W   #0x0, &update_display_count
    138          // Interrupts are disabled by default, enable them.
    139            enable_interrupts();
   \   00004E   ........     CALLA   #enable_interrupts
    140          //------------------------------------------------------------------------------
    141          }
   \   000052   3A41         POP.W   R10
   \   000054   1001         RETA
    142          

   \                                 In  segment CODE, align 2
    143          void Init_LEDs(void){
   \                     Init_LEDs:
    144          //------------------------------------------------------------------------------
    145          // LED Configurations
    146          //------------------------------------------------------------------------------
    147          // Turns on both LEDs
    148            P1OUT &= ~RED_LED;
   \   000000   D2C30202     BIC.B   #0x1, &0x202
    149            P6OUT &= ~GRN_LED;
   \   000004   F2C040004302 BIC.B   #0x40, &0x243
    150          //------------------------------------------------------------------------------
    151          }
   \   00000A   1001         RETA
   \   00000C                REQUIRE _A_PAOUT_L
   \   00000C                REQUIRE _A_PCOUT_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   NCSU   ">`:
   \   000000   2020204E4353 DC8 "   NCSU   "
   \            5520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ECE306  ">`:
   \   000000   202045434533 DC8 "  ECE306  "
   \            3036202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    LR    ">`:
   \   000000   202020204C52 DC8 "    LR    "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    BC    ">`:
   \   000000   202020204243 DC8 "    BC    "
   \            2020202000  
    152          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Init_Conditions
        6   -> enable_interrupts
      4   Init_LEDs
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Switches_Process
        4   -> enable_display_update
        4   -> strcpy
        4   -> update_string


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "    BC    ">
      11  ?<Constant "    LR    ">
      11  ?<Constant "   NCSU   ">
      11  ?<Constant "  ECE306  ">
      86  Init_Conditions
      12  Init_LEDs
       2  _A_PAOUT_L
       2  _A_PCOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       1  display_mode
     266  main
       1  slow_input_down
       2  test_value

 
 364 bytes in segment CODE
   6 bytes in segment DATA16_AN
  44 bytes in segment DATA16_C
   6 bytes in segment DATA16_Z
 
 364 bytes of CODE  memory
  44 bytes of CONST memory
   6 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
